<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Imgur.API</name>
    </assembly>
    <members>
        <member name="T:Imgur.API.ImgurException">
            <summary>
                The exception that is thrown when an error is found in a response from an Imgur endpoint.
            </summary>
        </member>
        <member name="M:Imgur.API.ImgurException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the ImgurException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Imgur.API.ImgurException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the ImgurException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Imgur.API.MashapeException">
            <summary>
                The exception that is thrown when an error is found in a response from a Mashape endpoint.
            </summary>
        </member>
        <member name="M:Imgur.API.MashapeException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the MashapeException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Imgur.API.MashapeException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the MashapeException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Imgur.API.Authentication.IApiClient">
            <summary>
                The type of client that will be used for authentication.
            </summary>
        </member>
        <member name="P:Imgur.API.Authentication.IApiClient.ClientId">
            <summary>
                The Imgur app's ClientId.
            </summary>
        </member>
        <member name="P:Imgur.API.Authentication.IApiClient.ClientSecret">
            <summary>
                The Imgur app's ClientSecret.
            </summary>
        </member>
        <member name="P:Imgur.API.Authentication.IApiClient.EndpointUrl">
            <summary>
                The Endpoint Url.
                https://api.imgur.com/3/ or https://imgur-apiv3.p.mashape.com/3/
            </summary>
        </member>
        <member name="P:Imgur.API.Authentication.IApiClient.OAuth2Token">
            <summary>
                An OAuth2 Token used for actions against a user's account.
            </summary>
        </member>
        <member name="P:Imgur.API.Authentication.IApiClient.RateLimit">
            <summary>
                Remaining credits for the application.
            </summary>
        </member>
        <member name="M:Imgur.API.Authentication.IApiClient.SetOAuth2Token(Imgur.API.Models.IOAuth2Token)">
            <summary>
                Sets <see cref="P:Imgur.API.Authentication.IApiClient.OAuth2Token" />.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="T:Imgur.API.Authentication.IImgurClient">
            <summary>
                Imgur API application credentials.
                Register at https://api.imgur.com/oauth2/addclient
            </summary>
        </member>
        <member name="T:Imgur.API.Authentication.IMashapeClient">
            <summary>
                Mashape API application credentials.
                Register at https://www.mashape.com/imgur/imgur-9
            </summary>
        </member>
        <member name="P:Imgur.API.Authentication.IMashapeClient.MashapeKey">
            <summary>
                The Mashape Key.
            </summary>
        </member>
        <member name="T:Imgur.API.Authentication.Impl.ApiClientBase">
            <summary>
                Base Client class.
            </summary>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.ApiClientBase.#ctor">
            <summary>
                Initializes a new instance of the ApiClientBase class.
            </summary>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.ApiClientBase.#ctor(System.String)">
            <summary>
                Initializes a new instance of the ApiClientBase class.
            </summary>
            <param name="clientId">The Imgur app's ClientId. </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.ApiClientBase.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the ApiClientBase class.
            </summary>
            <param name="clientId">The Imgur app's ClientId. </param>
            <param name="clientSecret">The Imgur app's ClientSecret.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.ApiClientBase.#ctor(System.String,Imgur.API.Models.IOAuth2Token)">
            <summary>
                Initializes a new instance of the ApiClientBase class.
            </summary>
            <param name="clientId">The Imgur app's ClientId. </param>
            <param name="oAuth2Token">OAuth2 credentials.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.ApiClientBase.#ctor(System.String,System.String,Imgur.API.Models.IOAuth2Token)">
            <summary>
                Initializes a new instance of the ApiClientBase class.
            </summary>
            <param name="clientId">The Imgur app's ClientId. </param>
            <param name="clientSecret">The Imgur app's ClientSecret.</param>
            <param name="oAuth2Token">OAuth2 credentials.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="P:Imgur.API.Authentication.Impl.ApiClientBase.ClientId">
            <summary>
                The Imgur app's ClientId.
            </summary>
        </member>
        <member name="P:Imgur.API.Authentication.Impl.ApiClientBase.ClientSecret">
            <summary>
                The Imgur app's ClientSecret.
            </summary>
        </member>
        <member name="P:Imgur.API.Authentication.Impl.ApiClientBase.EndpointUrl">
            <summary>
                The Endpoint Url.
                https://api.imgur.com/3/ or https://imgur-apiv3.p.mashape.com/3/
            </summary>
        </member>
        <member name="P:Imgur.API.Authentication.Impl.ApiClientBase.OAuth2Token">
            <summary>
                An OAuth2 Token used for actions against a user's account.
            </summary>
        </member>
        <member name="P:Imgur.API.Authentication.Impl.ApiClientBase.RateLimit">
            <summary>
                Remaining credits for the application.
            </summary>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.ApiClientBase.SetOAuth2Token(Imgur.API.Models.IOAuth2Token)">
            <summary>
                Sets the oAuth2Token to be used.
            </summary>
            <param name="oAuth2Token">See <see cref="T:Imgur.API.Models.IOAuth2Token" />.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="T:Imgur.API.Authentication.Impl.ImgurClient">
            <summary>
                Imgur API application credentials.
                Register at https://api.imgur.com/oauth2/addclient
            </summary>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.ImgurClient.#ctor(System.String)">
            <summary>
                Initializes a new instance of the ImgurClient class.
            </summary>
            <param name="clientId">The Imgur app's ClientId. </param>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.ImgurClient.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the ImgurClient class.
            </summary>
            <param name="clientId">The Imgur app's ClientId. </param>
            <param name="clientSecret">The Imgur app's ClientSecret.</param>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.ImgurClient.#ctor(System.String,Imgur.API.Models.IOAuth2Token)">
            <summary>
                Initializes a new instance of the ImgurClient class.
            </summary>
            <param name="clientId">The Imgur app's ClientId. </param>
            <param name="oAuth2Token">An OAuth2 Token used for actions against a user's account.</param>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.ImgurClient.#ctor(System.String,System.String,Imgur.API.Models.IOAuth2Token)">
            <summary>
                Initializes a new instance of the ImgurClient class.
            </summary>
            <param name="clientId">The Imgur app's ClientId. </param>
            <param name="clientSecret">The Imgur app's ClientSecret.</param>
            <param name="oAuth2Token">An OAuth2 Token used for actions against a user's account.</param>
        </member>
        <member name="P:Imgur.API.Authentication.Impl.ImgurClient.EndpointUrl">
            <summary>
                The Endpoint Url.
                https://api.imgur.com/3/
            </summary>
        </member>
        <member name="T:Imgur.API.Authentication.Impl.MashapeClient">
            <summary>
                Imgur API application credentials.
                Register at https://api.imgur.com/oauth2/addclient
            </summary>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.MashapeClient.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the ImgurClient class.
            </summary>
            <param name="clientId">The Imgur app's ClientId. </param>
            <param name="mashapeKey">The Mashape Key. </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.MashapeClient.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the MashapeClient class.
            </summary>
            <param name="clientId">The Imgur app's ClientId. </param>
            <param name="clientSecret">The Imgur app's ClientSecret.</param>
            <param name="mashapeKey">The Mashape Key. </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.MashapeClient.#ctor(System.String,System.String,Imgur.API.Models.IOAuth2Token)">
            <summary>
                Initializes a new instance of the MashapeClient class.
            </summary>
            <param name="clientId">The Imgur app's ClientId. </param>
            <param name="mashapeKey">The Mashape Key. </param>
            <param name="oAuth2Token">An OAuth2 Token used for actions against a user's account.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.Authentication.Impl.MashapeClient.#ctor(System.String,System.String,System.String,Imgur.API.Models.IOAuth2Token)">
            <summary>
                Initializes a new instance of the MashapeClient class.
            </summary>
            <param name="clientId">The Imgur app's ClientId. </param>
            <param name="clientSecret">The Imgur app's ClientSecret.</param>
            <param name="mashapeKey">The Mashape Key. </param>
            <param name="oAuth2Token">An OAuth2 Token used for actions against a user's account.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="P:Imgur.API.Authentication.Impl.MashapeClient.EndpointUrl">
            <summary>
                The Endpoint Url.
                https://imgur-apiv3.p.mashape.com/3/
            </summary>
        </member>
        <member name="P:Imgur.API.Authentication.Impl.MashapeClient.MashapeKey">
            <summary>
                The Mashape Key.
            </summary>
        </member>
        <member name="T:Imgur.API.Endpoints.IAccountEndpoint">
            <summary>
                Account related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.DeleteAlbumAsync(System.String,System.String)">
            <summary>
                Delete an Album with a given id. OAuth authentication required.
            </summary>
            <param name="albumId">The album id.</param>
            <param name="username">The user account. Default: me</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.DeleteCommentAsync(System.Int32,System.String)">
            <summary>
                Delete a comment. OAuth authentication required.
            </summary>
            <param name="commentId">The comment id.</param>
            <param name="username">The user account. Default: me</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.DeleteImageAsync(System.String,System.String)">
            <summary>
                Deletes an Image. OAuth authentication required.
            </summary>
            <param name="imageId">The image id.</param>
            <param name="username">The user account. Default: me</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetAccountAsync(System.String)">
            <summary>
                Request standard user information.
                If you need the username for the account that is logged in, it is returned in the request for an access token.
            </summary>
            <param name="username">The user account. Default: me</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetAccountFavoritesAsync">
            <summary>
                Returns the users favorited images. OAuth authentication required.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetAccountGalleryFavoritesAsync(System.String,System.Nullable{System.Int32},System.Nullable{Imgur.API.Enums.AccountGallerySortOrder})">
            <summary>
                Return the images the user has favorited in the gallery.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="page">Set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <param name="sort">The order that the account gallery should be sorted by. Default: Newest</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetAccountSettingsAsync">
            <summary>
                Returns the account settings. OAuth authentication required.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetAccountSubmissionsAsync(System.String,System.Nullable{System.Int32})">
            <summary>
                Return the images a user has submitted to the gallery.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="page">Set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetAlbumAsync(System.String,System.String)">
            <summary>
                Get additional information about an album, this works the same as the Album Endpoint.
            </summary>
            <param name="albumId">The album's id.</param>
            <param name="username">The user account. Default: me</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetAlbumCountAsync(System.String)">
            <summary>
                Return the total number of albums associated with the account.
            </summary>
            <param name="username">The user account. Default: me</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetAlbumIdsAsync(System.String,System.Nullable{System.Int32})">
            <summary>
                Return a list of all of the album IDs.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="page">Allows you to set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetAlbumsAsync(System.String,System.Nullable{System.Int32})">
            <summary>
                Get all the albums associated with the account.
                Must be logged in as the user to see secret and hidden albums.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="page">Allows you to set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetCommentAsync(System.Int32,System.String)">
            <summary>
                Return information about a specific comment.
            </summary>
            <param name="commentId">The comment id.</param>
            <param name="username">The user account. Default: me</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetCommentCountAsync(System.String)">
            <summary>
                Return a count of all of the comments associated with the account.
            </summary>
            <param name="username">The user account. Default: me</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetCommentIdsAsync(System.String,System.Nullable{Imgur.API.Enums.CommentSortOrder},System.Nullable{System.Int32})">
            <summary>
                Return a list of all of the comment IDs.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="sort">The order that the comments should be sorted by. Default: Newest</param>
            <param name="page">Allows you to set the page number so you don't have to retrieve all the data at once.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetCommentsAsync(System.String,System.Nullable{Imgur.API.Enums.CommentSortOrder},System.Nullable{System.Int32})">
            <summary>
                Return the comments the user has created.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="sort">The order that the comments should be sorted by. Default: Newest</param>
            <param name="page">Allows you to set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetGalleryProfileAsync(System.String)">
            <summary>
                The totals for a users gallery information.
            </summary>
            <param name="username">The user account. Default: me</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetImageAsync(System.String,System.String)">
            <summary>
                Return information about a specific image.
            </summary>
            <param name="imageId">The images's id.</param>
            <param name="username">The user account. Default: me</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetImageCountAsync(System.String)">
            <summary>
                Returns the total number of images associated with the account.
                OAuth authentication required.
            </summary>
            <param name="username">The user account. Default: me</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetImageIdsAsync(System.String,System.Nullable{System.Int32})">
            <summary>
                Returns a list of Image IDs that are associated with the account. OAuth authentication required.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="page">Allows you to set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetImagesAsync(System.String,System.Nullable{System.Int32})">
            <summary>
                Return all of the images associated with the account.
                You can page through the images by setting the page, this defaults to 0.
                OAuth authentication required.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="page">Allows you to set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.GetNotificationsAsync(System.Boolean)">
            <summary>
                Returns all of the notifications for the user.
                OAuth authentication required.
            </summary>
            <param name="newNotifications">false for all notifications, true for only non-viewed notification. Default is true.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.SendVerificationEmailAsync">
            <summary>
                Sends an email to the user to verify that their email is valid to upload to gallery.
                OAuth authentication required.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.UpdateAccountSettingsAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Imgur.API.Enums.AlbumPrivacy},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
                Updates the account settings for a given user.
                OAuth authentication required.
            </summary>
            <param name="bio">The biography of the user, is displayed in the gallery profile page.</param>
            <param name="publicImages">Set the users images to private or public by default.</param>
            <param name="messagingEnabled">Allows the user to enable / disable private messages.</param>
            <param name="albumPrivacy">Sets the default privacy level of albums the users creates.</param>
            <param name="acceptedGalleryTerms">The user agreement to the Imgur Gallery terms.</param>
            <param name="username">A valid Imgur username (between 4 and 63 alphanumeric characters).</param>
            <param name="showMature">Toggle display of mature images in gallery list endpoints.</param>
            <param name="newsletterSubscribed">Toggle subscription to email newsletter.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAccountEndpoint.VerifyEmailAsync">
            <summary>
                Checks to see if user has verified their email address.
                OAuth authentication required.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.IAlbumEndpoint">
            <summary>
                Album related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.IAlbumEndpoint.AddAlbumImagesAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Takes a list of imageIds to add to the album. For anonymous albums, {albumId} should be the
                deletehash
                that is returned at creation.
            </summary>
            <param name="albumId">The id or deletehash of the album.</param>
            <param name="imageIds">The imageIds that you want to be added to the album.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAlbumEndpoint.CreateAlbumAsync(System.String,System.String,System.Nullable{Imgur.API.Enums.AlbumPrivacy},System.Nullable{Imgur.API.Enums.AlbumLayout},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Create a new album.
            </summary>
            <param name="title">The title of the album.</param>
            <param name="description">The description of the album.</param>
            <param name="privacy">Sets the privacy level of the album.</param>
            <param name="layout">Sets the layout to display the album.</param>
            <param name="coverId">The Id of an image that you want to be the cover of the album.</param>
            <param name="imageIds">The imageIds that you want to be included in the album.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAlbumEndpoint.DeleteAlbumAsync(System.String)">
            <summary>
                Delete an album with a given Id. You are required to be logged in as the user to delete the album. For anonymous
                albums, {albumId} should be the deletehash that is returned at creation.
            </summary>
            <param name="albumId">The id or deletehash of the album.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAlbumEndpoint.FavoriteAlbumAsync(System.String)">
            <summary>
                Favorite an album with a given Id. OAuth authentication required.
            </summary>
            <param name="albumId">The album id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAlbumEndpoint.GetAlbumAsync(System.String)">
            <summary>
                Get information about a specific album.
            </summary>
            <param name="albumId">The album id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAlbumEndpoint.GetAlbumImageAsync(System.String,System.String)">
            <summary>
                Get information about an image in an album.
            </summary>
            <param name="imageId">The image id.</param>
            <param name="albumId">The album id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAlbumEndpoint.GetAlbumImagesAsync(System.String)">
            <summary>
                Return all of the images in the album.
            </summary>
            <param name="albumId">The album id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAlbumEndpoint.RemoveAlbumImagesAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Takes a list of imageIds and removes from the album. For anonymous albums, {albumId} should be the
                deletehash that is returned at creation.
            </summary>
            <param name="albumId">The id or deletehash of the album.</param>
            <param name="imageIds">The imageIds that you want to be removed from the album.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAlbumEndpoint.SetAlbumImagesAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Sets the images for an album, removes all other images and only uses the images in this request. For anonymous
                albums, {albumId} should be the deletehash that is returned at creation.
            </summary>
            <param name="albumId">The id or deletehash of the album.</param>
            <param name="imageIds">The imageIds that you want to be added to the album.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IAlbumEndpoint.UpdateAlbumAsync(System.String,System.String,System.String,System.Nullable{Imgur.API.Enums.AlbumPrivacy},System.Nullable{Imgur.API.Enums.AlbumLayout},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Update the information of an album. For anonymous albums, {albumId} should be the deletehash that is returned at
                creation.
            </summary>
            <param name="albumId">The id or deletehash of the album.</param>
            <param name="title">The title of the album.</param>
            <param name="description">The description of the album.</param>
            <param name="privacy">Sets the privacy level of the album.</param>
            <param name="layout">Sets the layout to display the album.</param>
            <param name="coverId">The Id of an image that you want to be the cover of the album.</param>
            <param name="imageIds">The imageIds that you want to be included in the album.</param>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.ICommentEndpoint">
            <summary>
                Comment related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.ICommentEndpoint.CreateCommentAsync(System.String,System.String,System.String)">
            <summary>
                Creates a new comment, returns the ID of the comment.
                OAuth authentication required.
            </summary>
            <param name="comment">The comment text, this is what will be displayed.</param>
            <param name="galleryItemId">The ID of the item in the gallery that you wish to comment on.</param>
            <param name="parentId">The ID of the parent comment, this is an alternative method to create a reply.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ICommentEndpoint.CreateReplyAsync(System.String,System.String,System.String)">
            <summary>
                Create a reply for the given comment, returns the ID of the comment.
                OAuth authentication required.
            </summary>
            <param name="comment">The comment text, this is what will be displayed.</param>
            <param name="galleryItemId">The ID of the item in the gallery that you wish to comment on.</param>
            <param name="parentId">The comment id that you are replying to.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ICommentEndpoint.DeleteCommentAsync(System.Int32)">
            <summary>
                Delete a comment by the given id.
                OAuth authentication required.
            </summary>
            <param name="commentId">The comment id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ICommentEndpoint.GetCommentAsync(System.Int32)">
            <summary>
                Get information about a specific comment.
            </summary>
            <param name="commentId">The comment id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ICommentEndpoint.GetRepliesAsync(System.Int32)">
            <summary>
                Get the comment with all of the replies for the comment.
            </summary>
            <param name="commentId">The comment id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ICommentEndpoint.ReportCommentAsync(System.Int32,Imgur.API.Enums.ReportReason)">
            <summary>
                Report a comment for being inappropriate.
                OAuth authentication required.
            </summary>
            <param name="commentId">The comment id.</param>
            <param name="reason">The reason why the comment is inappropriate.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ICommentEndpoint.VoteCommentAsync(System.Int32,Imgur.API.Enums.VoteOption)">
            <summary>
                Vote on a comment.
                OAuth authentication required.
            </summary>
            <param name="commentId">The comment id.</param>
            <param name="vote">The vote.</param>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.IConversationEndpoint">
            <summary>
                Conversation related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.IConversationEndpoint.BlockSenderAsync(System.String)">
            <summary>
                Block the user from sending messages to the user that is logged in.
                OAuth authentication required.
            </summary>
            <param name="username">The sender that should be blocked.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.IConversationEndpoint.CreateConversationAsync(System.String,System.String)">
            <summary>
                Create a new message. OAuth authentication required.
            </summary>
            <param name="recipient">The recipient username, this person will receive the message.</param>
            <param name="body">The message itself, similar to the body of an email.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.IConversationEndpoint.DeleteConversationAsync(System.String)">
            <summary>
                Delete a conversation by the given id. OAuth authentication required.
            </summary>
            <param name="conversationId">The conversation id.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.IConversationEndpoint.GetConversationAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Get information about a specific conversation. Includes messages.
                OAuth authentication required.
            </summary>
            <param name="conversationId">The conversation id.</param>
            <param name="page">
                Page of message thread. Starting at 1 for the most recent 25 messages and counting upwards. Default:
                null
            </param>
            <param name="offset">Additional offset in current page.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.IConversationEndpoint.GetConversationsAsync">
            <summary>
                Get list of all conversations for the logged in user.
                OAuth authentication required.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.IConversationEndpoint.ReportSenderAsync(System.String)">
            <summary>
                Report a user for sending messages that are against the Terms of Service.
                OAuth authentication required.
            </summary>
            <param name="username">The sender that should be reported.</param>
        </member>
        <member name="T:Imgur.API.Endpoints.ICustomGalleryEndpoint">
            <summary>
                Custom Gallery related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.ICustomGalleryEndpoint.AddCustomGalleryTagsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Add tags to a user's custom gallery.
                OAuth authentication required.
            </summary>
            <param name="tags">The tags that should be added.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ICustomGalleryEndpoint.AddFilteredOutGalleryTagAsync(System.String)">
            <summary>
                Add tags to filter out.
                OAuth authentication required.
            </summary>
            <param name="tag">The tag that should be filtered out.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ICustomGalleryEndpoint.GetCustomGalleryAsync(System.Nullable{Imgur.API.Enums.CustomGallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                View images for current user's custom gallery.
                OAuth authentication required.
            </summary>
            <param name="sort">The order that the gallery should be sorted by. Default: Viral</param>
            <param name="window">The time period that should be used in filtering requests. Default: Week</param>
            <param name="page">Set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ICustomGalleryEndpoint.GetCustomGalleryItemAsync(System.String)">
            <summary>
                View a single item in a user's custom gallery.
                OAuth authentication required.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ICustomGalleryEndpoint.GetFilteredOutGalleryAsync(System.Nullable{Imgur.API.Enums.CustomGallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                Retrieve user's filtered out gallery.
                OAuth authentication required.
            </summary>
            <param name="sort">The order that the gallery should be sorted by. Default: Viral</param>
            <param name="window">The time period that should be used in filtering requests. Default: Week</param>
            <param name="page">Set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ICustomGalleryEndpoint.RemoveCustomGalleryTagsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Remove tags from a custom gallery.
                OAuth authentication required.
            </summary>
            <param name="tags">The tags that should be removed.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ICustomGalleryEndpoint.RemoveFilteredOutGalleryTagAsync(System.String)">
            <summary>
                Remove a filtered out tag.
                OAuth authentication required.
            </summary>
            <param name="tag">The tag that should be removed.</param>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.IEndpoint">
            <summary>
                Endpoint definition.
            </summary>
        </member>
        <member name="P:Imgur.API.Endpoints.IEndpoint.ApiClient">
            <summary>
                Interface for all Api authentication types.
            </summary>
        </member>
        <member name="P:Imgur.API.Endpoints.IEndpoint.HttpClient">
            <summary>
                The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.IEndpoint.SwitchClient(Imgur.API.Authentication.IApiClient)">
            <summary>
                Switch from one client type to another.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
        </member>
        <member name="T:Imgur.API.Endpoints.IGalleryEndpoint">
            <summary>
                Gallery related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.CreateGalleryItemCommentAsync(System.String,System.String)">
            <summary>
                Create a comment for an item. OAuth authentication required.
            </summary>
            <param name="comment">The text of the comment.</param>
            <param name="galleryItemId">The gallery item id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.CreateGalleryItemCommentReplyAsync(System.String,System.String,System.String)">
            <summary>
                Reply to a comment that has been created for an item. OAuth authentication required.
            </summary>
            <param name="comment">The text of the comment.</param>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="parentId">The comment id that you are replying to.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetGalleryAlbumAsync(System.String)">
            <summary>
                Get additional information about an album in the gallery.
            </summary>
            <param name="albumId">The album id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetGalleryAsync(System.Nullable{Imgur.API.Enums.GallerySection},System.Nullable{Imgur.API.Enums.GallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
                Returns the images in the gallery.
            </summary>
            <param name="section">The gallery section. Default: Hot</param>
            <param name="sort">The order that the gallery should be sorted by. Default: Viral</param>
            <param name="window">The time period that should be used in filtering requests. Default: Day</param>
            <param name="page">The data paging number. Default: null</param>
            <param name="showViral">Show or hide viral images from the 'user' section. Default: true</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetGalleryImageAsync(System.String)">
            <summary>
                Get additional information about an image in the gallery.
            </summary>
            <param name="imageId">The image id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetGalleryItemCommentAsync(System.Int32,System.String)">
            <summary>
                Get information about a specific comment.
            </summary>
            <param name="commentId">The comment id.</param>
            <param name="galleryItemId">The gallery item id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetGalleryItemCommentCountAsync(System.String)">
            <summary>
                The number of comments on an item.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetGalleryItemCommentIdsAsync(System.String)">
            <summary>
                List all of the IDs for the comments on an item.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetGalleryItemCommentsAsync(System.String,System.Nullable{Imgur.API.Enums.CommentSortOrder})">
            <summary>
                Get all comments for a gallery item.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="sort">The order that comments should be sorted by.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetGalleryItemTagsAsync(System.String)">
            <summary>
                View tags for a gallery item.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetGalleryItemVotesAsync(System.String)">
            <summary>
                Get the vote information about an image.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetGalleryTagAsync(System.String,System.Nullable{Imgur.API.Enums.GalleryTagSortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                View images for a gallery tag.
            </summary>
            <param name="tag">The name of the tag.</param>
            <param name="sort">The order that the images in the gallery tag should be sorted by. Default: Viral</param>
            <param name="window">The time period that should be used in filtering requests. Default: Week</param>
            <param name="page">The data paging number. Default: null</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetGalleryTagImageAsync(System.String,System.String)">
            <summary>
                View a single image in a gallery tag.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="tag">The name of the tag.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetMemesSubGalleryAsync(System.Nullable{Imgur.API.Enums.MemesGallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                View images for memes subgallery.
            </summary>
            <param name="sort">The order that the gallery should be sorted by. Default: Viral</param>
            <param name="window">The time period that should be used in filtering requests. Default: Day</param>
            <param name="page">The data paging number. Default: null</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetMemesSubGalleryImageAsync(System.String)">
            <summary>
                View a single image in the memes gallery.
            </summary>
            <param name="imageId">The image id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetRandomGalleryAsync(System.Nullable{System.Int32})">
            <summary>
                Returns a random set of gallery images.
            </summary>
            <param name="page">A page of random gallery images, from 0-50. Pages are regenerated every hour.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetSubredditGalleryAsync(System.String,System.Nullable{Imgur.API.Enums.SubredditGallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                View gallery images for a subreddit.
            </summary>
            <param name="subreddit">A valid subreddit name. Example: pics, gaming</param>
            <param name="sort">The order that the gallery should be sorted by. Default: Time</param>
            <param name="window">The time period that should be used in filtering requests. Default: Week</param>
            <param name="page">The data paging number. Default: null</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.GetSubredditImageAsync(System.String,System.String)">
            <summary>
                View a single image in the subreddit.
            </summary>
            <param name="imageId">The image id.</param>
            <param name="subreddit">A valid subreddit name. Example: pics, gaming</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.PublishToGalleryAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
                Share an Album or Image to the Gallery. OAuth authentication required.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="title">The title of the image. This is required.</param>
            <param name="topicId">The topic id - not the topic name.</param>
            <param name="bypassTerms">
                If the user has not accepted the terms yet, this endpoint will return an error. To by-pass
                the terms in general simply set this value to true.
            </param>
            <param name="mature">If the post is mature, set this value to true.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.RemoveFromGalleryAsync(System.String)">
            <summary>
                Remove an image from the gallery. OAuth authentication required.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.ReportGalleryItemAsync(System.String,Imgur.API.Enums.ReportReason)">
            <summary>
                Report an item in the gallery. OAuth authentication required.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="reason">A reason why content is inappropriate.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.SearchGalleryAdvancedAsync(System.String,System.String,System.String,System.String,System.Nullable{Imgur.API.Enums.ImageFileType},System.Nullable{Imgur.API.Enums.ImageSize},System.Nullable{Imgur.API.Enums.GallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                Search the gallery with a given query string.
            </summary>
            <param name="qAll">Search for all of these words (and).</param>
            <param name="qAny">Search for any of these words (or).</param>
            <param name="qExactly">Search for exactly this word or phrase.</param>
            <param name="qNot">Exclude results matching this word or phrase.</param>
            <param name="fileType">Show results for a specific file type.</param>
            <param name="imageSize">Show results for a specific image size.</param>
            <param name="sort">The order that the gallery should be sorted by. Default: Time</param>
            <param name="window">The time period that should be used in filtering requests. Default: Day</param>
            <param name="page">The data paging number. Default: null</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.SearchGalleryAsync(System.String,System.Nullable{Imgur.API.Enums.GallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                Search the gallery with a given query string.
            </summary>
            <param name="query">
                Query string to search by. This parameter also supports boolean operators (AND, OR, NOT) and
                indices (tag: user: title: ext: subreddit: album: meme:). An example compound query would be 'title: cats AND dogs
                ext: gif'
            </param>
            <param name="sort">The order that the gallery should be sorted by. Default: Time</param>
            <param name="window">The time period that should be used in filtering requests. Default: Day</param>
            <param name="page">The data paging number. Default: null</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.VoteGalleryItemAsync(System.String,Imgur.API.Enums.VoteOption)">
            <summary>
                Vote for an item. Send the same value again to undo a vote. OAuth authentication required.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="vote">The vote.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IGalleryEndpoint.VoteGalleryTagAsync(System.String,System.String,Imgur.API.Enums.VoteOption)">
            <summary>
                Vote for a tag. Send the same value again to undo a vote. OAuth authentication required.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="tag">Name of the tag (implicitly created, if doesn't exist).</param>
            <param name="vote">The vote.</param>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.IImageEndpoint">
            <summary>
                Image related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.IImageEndpoint.DeleteImageAsync(System.String)">
            <summary>
                Deletes an image. For an anonymous image, {id} must be the image's deletehash.
                If the image belongs to your account then passing the ID of the image is sufficient.
            </summary>
            <param name="imageId">The image id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IImageEndpoint.FavoriteImageAsync(System.String)">
            <summary>
                Favorite an image with the given ID. OAuth authentication required.
            </summary>
            <param name="imageId">The image id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IImageEndpoint.GetImageAsync(System.String)">
            <summary>
                Get information about an image.
            </summary>
            <param name="imageId">The image id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IImageEndpoint.UpdateImageAsync(System.String,System.String,System.String)">
            <summary>
                Updates the title or description of an image.
                You can only update an image you own and is associated with your account.
                For an anonymous image, {id} must be the image's deletehash.
            </summary>
            <param name="imageId">The image id.</param>
            <param name="title">The title of the image.</param>
            <param name="description">The description of the image.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IImageEndpoint.UploadImageBinaryAsync(System.Byte[],System.String,System.String,System.String)">
            <summary>
                Upload a new image using a binary file.
            </summary>
            <param name="image">A binary file.</param>
            <param name="albumId">
                The id of the album you want to add the image to. For anonymous albums, {albumId} should be the
                deletehash that is returned at creation.
            </param>
            <param name="title">The title of the image.</param>
            <param name="description">The description of the image.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IImageEndpoint.UploadImageStreamAsync(System.IO.Stream,System.String,System.String,System.String)">
            <summary>
                Upload a new image using a stream.
            </summary>
            <param name="image">A stream.</param>
            <param name="albumId">
                The id of the album you want to add the image to. For anonymous albums, {albumId} should be the
                deletehash that is returned at creation.
            </param>
            <param name="title">The title of the image.</param>
            <param name="description">The description of the image.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IImageEndpoint.UploadImageUrlAsync(System.String,System.String,System.String,System.String)">
            <summary>
                Upload a new image using a URL.
            </summary>
            <param name="image">The URL for the image.</param>
            <param name="albumId">
                The id of the album you want to add the image to. For anonymous albums, {albumId} should be the
                deletehash that is returned at creation.
            </param>
            <param name="title">The title of the image.</param>
            <param name="description">The description of the image.</param>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.IMemeGenEndpoint">
            <summary>
                Meme related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.IMemeGenEndpoint.GetDefaultMemesAsync">
            <summary>
                Get the list of default memes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.INotificationEndpoint">
            <summary>
                Notification related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.INotificationEndpoint.GetNotificationAsync(System.String)">
            <summary>
                Returns the data about a specific notification.
                OAuth authentication required.
            </summary>
            <param name="notificationId">The notification id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.INotificationEndpoint.GetNotificationsAsync(System.Boolean)">
            <summary>
                Returns all of the notifications for the user.
                OAuth authentication required.
            </summary>
            <param name="newNotifications">false for all notifications, true for only non-viewed notification. Default is true.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.INotificationEndpoint.MarkNotificationsViewedAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Marks notifications as viewed.
                OAuth authentication required.
            </summary>
            <param name="ids">The notification id.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.INotificationEndpoint.MarkNotificationViewedAsync(System.String)">
            <summary>
                Marks a notification as viewed.
                OAuth authentication required.
            </summary>
            <param name="notificationId">The notification id.</param>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.IOAuth2Endpoint">
            <summary>
                Authorizes account access.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.IOAuth2Endpoint.GetAuthorizationUrl(Imgur.API.Enums.OAuth2ResponseType,System.String)">
            <summary>
                Creates an authorization url that can be used to authorize access to a user's account.
            </summary>
            <param name="oAuth2ResponseType">Determines if Imgur returns a Code, a PIN code, or an opaque Token.</param>
            <param name="state">
                This optional parameter indicates any state which may be useful to your application upon receipt of
                the response.
            </param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IOAuth2Endpoint.GetTokenByCodeAsync(System.String)">
            <summary>
                After the user authorizes, the pin is returned as a code to your application
                via the redirect URL you specified during registration, in the form of a regular query string parameter.
            </summary>
            <param name="code">The code from the query string.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IOAuth2Endpoint.GetTokenByPinAsync(System.String)">
            <summary>
                After the user authorizes, they will receive a PIN code that they copy into your app.
            </summary>
            <param name="pin">The PIN that the user is prompted to enter.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.IOAuth2Endpoint.GetTokenByRefreshTokenAsync(System.String)">
            <summary>
                If a user has authorized their account but you no longer have a valid access_token for them,
                then a new one can be generated by using the refreshToken.
                <para>
                    When your application receives a refresh token, it is important to store
                    that refresh token for future use.
                </para>
                <para>
                    If your application loses the refresh token, you will have to prompt the user
                    for their login information again.
                </para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.IRateLimitEndpoint">
            <summary>
                Gets credit limit.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.IRateLimitEndpoint.GetRateLimitAsync">
            <summary>
                Gets remaining credits for the application.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.ITopicEndpoint">
            <summary>
                Topic related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.ITopicEndpoint.GetDefaultTopicsAsync">
            <summary>
                Get the list of default topics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ITopicEndpoint.GetGalleryTopicItemAsync(System.String,System.String)">
            <summary>
                View a single item in a gallery topic.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="topicId">
                The ID or URL-formatted name of the topic. If using a topic's name, replace its spaces with
                underscores (Mother's_Day).
            </param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.ITopicEndpoint.GetGalleryTopicItemsAsync(System.String,System.Nullable{Imgur.API.Enums.CustomGallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                View gallery items for a topic.
            </summary>
            <param name="topicId">
                The ID or URL-formatted name of the topic. If using a topic's name, replace its spaces with
                underscores (Mother's_Day).
            </param>
            <param name="sort">The order that the gallery should be sorted by. Default: Viral</param>
            <param name="window">The time period that should be used in filtering requests. Default: Week</param>
            <param name="page">The data paging number. Default: null</param>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.Impl.AccountEndpoint">
            <summary>
                Account related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.DeleteAlbumAsync(System.String,System.String)">
            <summary>
                Delete an Album with a given id. OAuth authentication required.
            </summary>
            <param name="albumId">The album id.</param>
            <param name="username">The user account. Default: me</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetAlbumAsync(System.String,System.String)">
            <summary>
                Get additional information about an album, this works the same as the Album Endpoint.
            </summary>
            <param name="albumId">The album id.</param>
            <param name="username">The user account. Default: me</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetAlbumCountAsync(System.String)">
            <summary>
                Return a list of all of the album IDs.
            </summary>
            <param name="username">The user account. Default: me</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetAlbumIdsAsync(System.String,System.Nullable{System.Int32})">
            <summary>
                Return a list of all of the album IDs.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="page">Allows you to set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetAlbumsAsync(System.String,System.Nullable{System.Int32})">
            <summary>
                Get all the albums associated with the account.
                Must be logged in as the user to see secret and hidden albums.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="page">Allows you to set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.DeleteCommentAsync(System.Int32,System.String)">
            <summary>
                Delete a comment. OAuth authentication required.
            </summary>
            <param name="commentId">The comment id.</param>
            <param name="username">The user account. Default: me</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetCommentAsync(System.Int32,System.String)">
            <summary>
                Return information about a specific comment.
            </summary>
            <param name="commentId">The comment id.</param>
            <param name="username">The user account. Default: me</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetCommentCountAsync(System.String)">
            <summary>
                Return a count of all of the comments associated with the account.
            </summary>
            <param name="username">The user account. Default: me</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetCommentIdsAsync(System.String,System.Nullable{Imgur.API.Enums.CommentSortOrder},System.Nullable{System.Int32})">
            <summary>
                Return a list of all of the comment IDs.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="sort">The order that the comments should be sorted by. Default: Newest</param>
            <param name="page">Allows you to set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetCommentsAsync(System.String,System.Nullable{Imgur.API.Enums.CommentSortOrder},System.Nullable{System.Int32})">
            <summary>
                Return the comments the user has created.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="sort">The order that the comments should be sorted by. Default: Newest</param>
            <param name="page">Allows you to set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.#ctor(Imgur.API.Authentication.IApiClient)">
            <summary>
                Initializes a new instance of the AccountEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.#ctor(Imgur.API.Authentication.IApiClient,System.Net.Http.HttpClient)">
            <summary>
                Initializes a new instance of the AccountEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <param name="httpClient"> The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetAccountAsync(System.String)">
            <summary>
                Request standard user information.
                If you need the username for the account that is logged in, it is returned in the request for an access token.
            </summary>
            <param name="username">The user account. Default: me</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetAccountSettingsAsync">
            <summary>
                Returns the account settings. OAuth authentication required.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.SendVerificationEmailAsync">
            <summary>
                Sends an email to the user to verify that their email is valid to upload to gallery.
                OAuth authentication required.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.UpdateAccountSettingsAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Imgur.API.Enums.AlbumPrivacy},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
                Updates the account settings for a given user. OAuth authentication required.
            </summary>
            <param name="bio">The biography of the user, is displayed in the gallery profile page.</param>
            <param name="publicImages">Set the users images to private or public by default.</param>
            <param name="messagingEnabled">Allows the user to enable / disable private messages.</param>
            <param name="albumPrivacy">Sets the default privacy level of albums the users creates.</param>
            <param name="acceptedGalleryTerms">The user agreement to the Imgur Gallery terms.</param>
            <param name="username">A valid Imgur username (between 4 and 63 alphanumeric characters).</param>
            <param name="showMature">Toggle display of mature images in gallery list endpoints.</param>
            <param name="newsletterSubscribed">Toggle subscription to email newsletter.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.VerifyEmailAsync">
            <summary>
                Checks to see if user has verified their email address. OAuth authentication required.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetAccountFavoritesAsync">
            <summary>
                Returns the users favorited images. OAuth authentication required.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetAccountGalleryFavoritesAsync(System.String,System.Nullable{System.Int32},System.Nullable{Imgur.API.Enums.AccountGallerySortOrder})">
            <summary>
                Return the images the user has favorited in the gallery.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="page">Set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <param name="sort">The order that the account gallery should be sorted by. Default: Newest</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetAccountSubmissionsAsync(System.String,System.Nullable{System.Int32})">
            <summary>
                Return the images a user has submitted to the gallery.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="page">Set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetGalleryProfileAsync(System.String)">
            <summary>
                The totals for a users gallery information.
            </summary>
            <param name="username">The user account. Default: me</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.DeleteImageAsync(System.String,System.String)">
            <summary>
                Deletes an Image. You are required to be logged in as the user whom created the image.
                OAuth authentication required.
            </summary>
            <param name="imageId">The image id.</param>
            <param name="username">The user account. Default: me</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetImageAsync(System.String,System.String)">
            <summary>
                Return information about a specific image.
            </summary>
            <param name="imageId">The image's id.</param>
            <param name="username">The user account. Default: me</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetImageCountAsync(System.String)">
            <summary>
                Returns the total number of images associated with the account.
                OAuth authentication required.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetImageIdsAsync(System.String,System.Nullable{System.Int32})">
            <summary>
                Returns a list of Image IDs that are associated with the account.
                OAuth authentication required.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="page">Allows you to set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetImagesAsync(System.String,System.Nullable{System.Int32})">
            <summary>
                Return all of the images associated with the account.
                You can page through the images by setting the page, this defaults to 0.
                OAuth authentication required.
            </summary>
            <param name="username">The user account. Default: me</param>
            <param name="page">Allows you to set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AccountEndpoint.GetNotificationsAsync(System.Boolean)">
            <summary>
                Returns all of the reply notifications for the user.
                OAuth authentication required.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <param name="newNotifications">false for all notifications, true for only non-viewed notification. Default is true.</param>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.Impl.AlbumEndpoint">
            <summary>
                Album related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AlbumEndpoint.#ctor(Imgur.API.Authentication.IApiClient)">
            <summary>
                Initializes a new instance of the AlbumEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AlbumEndpoint.#ctor(Imgur.API.Authentication.IApiClient,System.Net.Http.HttpClient)">
            <summary>
                Initializes a new instance of the AlbumEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <param name="httpClient"> The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AlbumEndpoint.AddAlbumImagesAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Takes a list of imageIds to add to the album. For anonymous albums, {albumId} should be the
                deletehash
                that is returned at creation.
            </summary>
            <param name="albumId">The id or deletehash of the album.</param>
            <param name="imageIds">The imageIds that you want to be added to the album.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AlbumEndpoint.CreateAlbumAsync(System.String,System.String,System.Nullable{Imgur.API.Enums.AlbumPrivacy},System.Nullable{Imgur.API.Enums.AlbumLayout},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Create a new album.
            </summary>
            <param name="title">The title of the album.</param>
            <param name="description">The description of the album.</param>
            <param name="privacy">Sets the privacy level of the album.</param>
            <param name="layout">Sets the layout to display the album.</param>
            <param name="coverId">The Id of an image that you want to be the cover of the album.</param>
            <param name="imageIds">The imageIds that you want to be included in the album.</param>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AlbumEndpoint.DeleteAlbumAsync(System.String)">
            <summary>
                Delete an album with a given Id. You are required to be logged in as the user to delete the album. For anonymous
                albums, {albumId} should be the deletehash that is returned at creation.
            </summary>
            <param name="albumId">The id or deletehash of the album.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AlbumEndpoint.FavoriteAlbumAsync(System.String)">
            <summary>
                Favorite an album with a given Id. OAuth authentication required.
            </summary>
            <param name="albumId">The album id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AlbumEndpoint.GetAlbumAsync(System.String)">
            <summary>
                Get information about a specific album.
            </summary>
            <param name="albumId">The album id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AlbumEndpoint.GetAlbumImageAsync(System.String,System.String)">
            <summary>
                Get information about an image in an album.
            </summary>
            <param name="imageId">The image id.</param>
            <param name="albumId">The album id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AlbumEndpoint.GetAlbumImagesAsync(System.String)">
            <summary>
                Return all of the images in the album.
            </summary>
            <param name="albumId">The album id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AlbumEndpoint.RemoveAlbumImagesAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Takes a list of imageIds and removes from the album. For anonymous albums, {albumId} should be the
                deletehash that is returned at creation.
            </summary>
            <param name="albumId">The id or deletehash of the album.</param>
            <param name="imageIds">The imageIds that you want to be removed from the album.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AlbumEndpoint.SetAlbumImagesAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Sets the images for an album, removes all other images and only uses the images in this request. For anonymous
                albums, {albumId} should be the deletehash that is returned at creation.
            </summary>
            <param name="albumId">The id or deletehash of the album.</param>
            <param name="imageIds">The imageIds that you want to be added to the album.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.AlbumEndpoint.UpdateAlbumAsync(System.String,System.String,System.String,System.Nullable{Imgur.API.Enums.AlbumPrivacy},System.Nullable{Imgur.API.Enums.AlbumLayout},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Update the information of an album. For anonymous albums, {albumId} should be the deletehash that is returned at
                creation.
            </summary>
            <param name="albumId">The id or deletehash of the album.</param>
            <param name="title">The title of the album.</param>
            <param name="description">The description of the album.</param>
            <param name="privacy">Sets the privacy level of the album.</param>
            <param name="layout">Sets the layout to display the album.</param>
            <param name="coverId">The Id of an image that you want to be the cover of the album.</param>
            <param name="imageIds">The imageIds that you want to be included in the album.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.Impl.CommentEndpoint">
            <summary>
                Comment related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CommentEndpoint.#ctor(Imgur.API.Authentication.IApiClient)">
            <summary>
                Initializes a new instance of the CommentEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CommentEndpoint.#ctor(Imgur.API.Authentication.IApiClient,System.Net.Http.HttpClient)">
            <summary>
                Initializes a new instance of the CommentEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <param name="httpClient"> The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CommentEndpoint.CreateCommentAsync(System.String,System.String,System.String)">
            <summary>
                Creates a new comment, returns the ID of the comment.
                OAuth authentication required.
            </summary>
            <param name="comment">The comment text, this is what will be displayed.</param>
            <param name="galleryItemId">The ID of the item in the gallery that you wish to comment on.</param>
            <param name="parentId">The ID of the parent comment, this is an alternative method to create a reply.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CommentEndpoint.CreateReplyAsync(System.String,System.String,System.String)">
            <summary>
                Create a reply for the given comment, returns the ID of the comment.
                OAuth authentication required.
            </summary>
            <param name="comment">The comment text, this is what will be displayed.</param>
            <param name="galleryItemId">The ID of the item in the gallery that you wish to comment on.</param>
            <param name="parentId">The comment id that you are replying to.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CommentEndpoint.DeleteCommentAsync(System.Int32)">
            <summary>
                Delete a comment by the given id.
                OAuth authentication required.
            </summary>
            <param name="commentId">The comment id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CommentEndpoint.GetCommentAsync(System.Int32)">
            <summary>
                Get information about a specific comment.
            </summary>
            <param name="commentId">The comment id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CommentEndpoint.GetRepliesAsync(System.Int32)">
            <summary>
                Get the comment with all of the replies for the comment.
            </summary>
            <param name="commentId">The comment id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CommentEndpoint.ReportCommentAsync(System.Int32,Imgur.API.Enums.ReportReason)">
            <summary>
                Report a comment for being inappropriate.
                OAuth authentication required.
            </summary>
            <param name="commentId">The comment id.</param>
            <param name="reason">The reason why the comment is inappropriate.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CommentEndpoint.VoteCommentAsync(System.Int32,Imgur.API.Enums.VoteOption)">
            <summary>
                Vote on a comment.
                OAuth authentication required.
            </summary>
            <param name="commentId">The comment id.</param>
            <param name="vote">The vote.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.Impl.ConversationEndpoint">
            <summary>
                Conversation related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ConversationEndpoint.#ctor(Imgur.API.Authentication.IApiClient)">
            <summary>
                Initializes a new instance of the ConversationEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ConversationEndpoint.#ctor(Imgur.API.Authentication.IApiClient,System.Net.Http.HttpClient)">
            <summary>
                Initializes a new instance of the ConversationEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <param name="httpClient"> The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ConversationEndpoint.BlockSenderAsync(System.String)">
            <summary>
                Block the user from sending messages to the user that is logged in.
                OAuth authentication required.
            </summary>
            <param name="username">The sender that should be blocked.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ConversationEndpoint.CreateConversationAsync(System.String,System.String)">
            <summary>
                Create a new message. OAuth authentication required.
            </summary>
            <param name="recipient">The recipient username, this person will receive the message.</param>
            <param name="body">The message itself, similar to the body of an email.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ConversationEndpoint.DeleteConversationAsync(System.String)">
            <summary>
                Delete a conversation by the given id. OAuth authentication required.
            </summary>
            <param name="conversationId">The conversation id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ConversationEndpoint.GetConversationAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Get information about a specific conversation. Includes messages.
                OAuth authentication required.
            </summary>
            <param name="conversationId">The conversation id.</param>
            <param name="page">
                Page of message thread. Starting at 1 for the most recent 25 messages and counting upwards. Default:
                null
            </param>
            <param name="offset">Additional offset in current page.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ConversationEndpoint.GetConversationsAsync">
            <summary>
                Get list of all conversations for the logged in user.
                OAuth authentication required.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ConversationEndpoint.ReportSenderAsync(System.String)">
            <summary>
                Report a user for sending messages that are against the Terms of Service.
                OAuth authentication required.
            </summary>
            <param name="username">The sender that should be reported.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.Impl.CustomGalleryEndpoint">
            <summary>
                Custom Gallery related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CustomGalleryEndpoint.#ctor(Imgur.API.Authentication.IApiClient)">
            <summary>
                Initializes a new instance of the CustomGalleryEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CustomGalleryEndpoint.#ctor(Imgur.API.Authentication.IApiClient,System.Net.Http.HttpClient)">
            <summary>
                Initializes a new instance of the CustomGalleryEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <param name="httpClient"> The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CustomGalleryEndpoint.AddCustomGalleryTagsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Add tags to a user's custom gallery.
                OAuth authentication required.
            </summary>
            <param name="tags">The tags that should be added.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CustomGalleryEndpoint.AddFilteredOutGalleryTagAsync(System.String)">
            <summary>
                Add tags to filter out.
                OAuth authentication required.
            </summary>
            <param name="tag">The tag that should be filtered out.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CustomGalleryEndpoint.GetCustomGalleryAsync(System.Nullable{Imgur.API.Enums.CustomGallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                View images for current user's custom gallery.
                OAuth authentication required.
            </summary>
            <param name="sort">The order that the gallery should be sorted by. Default: Viral</param>
            <param name="window">The time period that should be used in filtering requests. Default: Week</param>
            <param name="page">Set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CustomGalleryEndpoint.GetCustomGalleryItemAsync(System.String)">
            <summary>
                View a single item in a user's custom gallery.
                OAuth authentication required.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CustomGalleryEndpoint.GetFilteredOutGalleryAsync(System.Nullable{Imgur.API.Enums.CustomGallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                Retrieve user's filtered out gallery.
                OAuth authentication required.
            </summary>
            <param name="sort">The order that the gallery should be sorted by. Default: Viral</param>
            <param name="window">The time period that should be used in filtering requests. Default: Week</param>
            <param name="page">Set the page number so you don't have to retrieve all the data at once. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CustomGalleryEndpoint.RemoveCustomGalleryTagsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Remove tags from a custom gallery.
                OAuth authentication required.
            </summary>
            <param name="tags">The tags that should be removed.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.CustomGalleryEndpoint.RemoveFilteredOutGalleryTagAsync(System.String)">
            <summary>
                Remove a filtered out tag.
                OAuth authentication required.
            </summary>
            <param name="tag">The tag that should be removed.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.Impl.EndpointBase">
            <summary>
                Builder class for endpoints.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.EndpointBase.#ctor(Imgur.API.Authentication.IApiClient)">
            <summary>
                Initializes a new instance of the EndpointBase class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.EndpointBase.#ctor">
            <summary>
                Initializes a new instance of the EndpointBase class.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.EndpointBase.#ctor(Imgur.API.Authentication.IApiClient,System.Net.Http.HttpClient)">
            <summary>
                Initializes a new instance of the EndpointBase class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <param name="httpClient"> The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="P:Imgur.API.Endpoints.Impl.EndpointBase.ApiClient">
            <summary>
                Interface for all API authentication types.
            </summary>
        </member>
        <member name="P:Imgur.API.Endpoints.Impl.EndpointBase.HttpClient">
            <summary>
                The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.EndpointBase.SwitchClient(Imgur.API.Authentication.IApiClient)">
            <summary>
                Switch from one client type to another.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.EndpointBase.ProcessEndpointResponse``1(System.Net.Http.HttpResponseMessage)">
            <summary>
                Parses the string stringResponse from the endpoint into an expected type T.
            </summary>
            <typeparam name="T">The expected output type, Image, bool, etc.</typeparam>
            <param name="response">The response from the endpoint.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.EndpointBase.SendRequestAsync``1(System.Net.Http.HttpRequestMessage)">
            <summary>
                Send requests to the service.
            </summary>
            <param name="message">The HttpRequestMessage that should be sent.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.EndpointBase.UpdateRateLimit(System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>
                Updates the ApiClient's RateLimit
                with the values from the last response from the Api.
            </summary>
            <param name="headers">The headers from the last request to the endpoint.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="T:Imgur.API.Endpoints.Impl.GalleryEndpoint">
            <summary>
                Gallery related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetGalleryAlbumAsync(System.String)">
            <summary>
                Get additional information about an album in the gallery.
            </summary>
            <param name="albumId">The album id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.CreateGalleryItemCommentAsync(System.String,System.String)">
            <summary>
                Create a comment for an item. OAuth authentication required.
            </summary>
            <param name="comment">The text of the comment.</param>
            <param name="galleryItemId">The gallery item id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.CreateGalleryItemCommentReplyAsync(System.String,System.String,System.String)">
            <summary>
                Reply to a comment that has been created for an item. OAuth authentication required.
            </summary>
            <param name="comment">The text of the comment.</param>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="parentId">The comment id that you are replying to.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetGalleryItemCommentAsync(System.Int32,System.String)">
            <summary>
                Get information about a specific comment.
            </summary>
            <param name="commentId">The comment id.</param>
            <param name="galleryItemId">The gallery item id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetGalleryItemCommentCountAsync(System.String)">
            <summary>
                The number of comments on an item.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetGalleryItemCommentIdsAsync(System.String)">
            <summary>
                List all of the IDs for the comments on an item.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetGalleryItemCommentsAsync(System.String,System.Nullable{Imgur.API.Enums.CommentSortOrder})">
            <summary>
                Get all comments for a gallery item.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="sort">The order that comments should be sorted by.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.#ctor(Imgur.API.Authentication.IApiClient)">
            <summary>
                Initializes a new instance of the GalleryEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.#ctor(Imgur.API.Authentication.IApiClient,System.Net.Http.HttpClient)">
            <summary>
                Initializes a new instance of the GalleryEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <param name="httpClient"> The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetGalleryAsync(System.Nullable{Imgur.API.Enums.GallerySection},System.Nullable{Imgur.API.Enums.GallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
                Returns the images in the gallery.
            </summary>
            <param name="section">The gallery section. Default: Hot</param>
            <param name="sort">The order that the gallery should be sorted by. Default: Viral</param>
            <param name="window">The time period that should be used in filtering requests. Default: Day</param>
            <param name="page">The data paging number. Default: null</param>
            <param name="showViral">Show or hide viral images from the 'user' section. Default: true</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetRandomGalleryAsync(System.Nullable{System.Int32})">
            <summary>
                Returns a random set of gallery images.
            </summary>
            <param name="page">A page of random gallery images, from 0-50. Pages are regenerated every hour.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.PublishToGalleryAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
                Share an Album or Image to the Gallery. OAuth authentication required.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="title">The title of the image. This is required.</param>
            <param name="topicId">The topic id - not the topic name.</param>
            <param name="bypassTerms">
                If the user has not accepted the terms yet, this endpoint will return an error. To by-pass
                the terms in general simply set this value to true.
            </param>
            <param name="mature">If the post is mature, set this value to true.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.RemoveFromGalleryAsync(System.String)">
            <summary>
                Remove an item from the gallery. OAuth authentication required.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.ReportGalleryItemAsync(System.String,Imgur.API.Enums.ReportReason)">
            <summary>
                Report an item in the gallery. OAuth authentication required.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="reason">A reason why content is inappropriate.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.SearchGalleryAdvancedAsync(System.String,System.String,System.String,System.String,System.Nullable{Imgur.API.Enums.ImageFileType},System.Nullable{Imgur.API.Enums.ImageSize},System.Nullable{Imgur.API.Enums.GallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                Search the gallery with a given query string.
            </summary>
            <param name="qAll">Search for all of these words (and).</param>
            <param name="qAny">Search for any of these words (or).</param>
            <param name="qExactly">Search for exactly this word or phrase.</param>
            <param name="qNot">Exclude results matching this word or phrase.</param>
            <param name="fileType">Show results for a specific file type.</param>
            <param name="imageSize">Show results for a specific image size.</param>
            <param name="sort">The order that the gallery should be sorted by. Default: Time</param>
            <param name="window">The time period that should be used in filtering requests. Default: Day</param>
            <param name="page">The data paging number. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.SearchGalleryAsync(System.String,System.Nullable{Imgur.API.Enums.GallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                Search the gallery with a given query string.
            </summary>
            <param name="query">
                Query string to search by. This parameter also supports boolean operators (AND, OR, NOT) and
                indices (tag: user: title: ext: subreddit: album: meme:). An example compound query would be 'title: cats AND dogs
                ext: gif'
            </param>
            <param name="sort">The order that the gallery should be sorted by. Default: Time</param>
            <param name="window">The time period that should be used in filtering requests. Default: Day</param>
            <param name="page">The data paging number. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetGalleryImageAsync(System.String)">
            <summary>
                Get additional information about an image in the gallery.
            </summary>
            <param name="imageId">The image id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetMemesSubGalleryAsync(System.Nullable{Imgur.API.Enums.MemesGallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                View images for memes subgallery.
            </summary>
            <param name="sort">The order that the gallery should be sorted by. Default: Viral</param>
            <param name="window">The time period that should be used in filtering requests. Default: Week</param>
            <param name="page">The data paging number. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetMemesSubGalleryImageAsync(System.String)">
            <summary>
                View a single image in the memes gallery.
            </summary>
            <param name="imageId">The image id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetSubredditGalleryAsync(System.String,System.Nullable{Imgur.API.Enums.SubredditGallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                View gallery images for a subreddit.
            </summary>
            <param name="subreddit">A valid subreddit name. Example: pics, gaming</param>
            <param name="sort">The order that the gallery should be sorted by. Default: Time</param>
            <param name="window">The time period that should be used in filtering requests. Default: Week</param>
            <param name="page">The data paging number. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetSubredditImageAsync(System.String,System.String)">
            <summary>
                View a single image in the subreddit.
            </summary>
            <param name="imageId">The image id.</param>
            <param name="subreddit">A valid subreddit name. Example: pics, gaming</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetGalleryItemTagsAsync(System.String)">
            <summary>
                View tags for a gallery item.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetGalleryTagAsync(System.String,System.Nullable{Imgur.API.Enums.GalleryTagSortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                View images for a gallery tag.
            </summary>
            <param name="tag">The name of the tag.</param>
            <param name="sort">The order that the images in the gallery tag should be sorted by. Default: Viral</param>
            <param name="window">The time period that should be used in filtering requests. Default: Week</param>
            <param name="page">The data paging number. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetGalleryTagImageAsync(System.String,System.String)">
            <summary>
                View a single item in a gallery tag.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="tag">The name of the tag.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.VoteGalleryTagAsync(System.String,System.String,Imgur.API.Enums.VoteOption)">
            <summary>
                Vote for a tag. Send the same value again to undo a vote. OAuth authentication required.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="tag">Name of the tag (implicitly created, if doesn't exist).</param>
            <param name="vote">The vote.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.GetGalleryItemVotesAsync(System.String)">
            <summary>
                Get the vote information about an image.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.GalleryEndpoint.VoteGalleryItemAsync(System.String,Imgur.API.Enums.VoteOption)">
            <summary>
                Vote for an item. Send the same value again to undo a vote. OAuth authentication required.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="vote">The vote.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.Impl.ImageEndpoint">
            <summary>
                Image related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ImageEndpoint.#ctor(Imgur.API.Authentication.IApiClient)">
            <summary>
                Initializes a new instance of the ImageEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ImageEndpoint.#ctor(Imgur.API.Authentication.IApiClient,System.Net.Http.HttpClient)">
            <summary>
                Initializes a new instance of the ImageEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <param name="httpClient"> The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ImageEndpoint.DeleteImageAsync(System.String)">
            <summary>
                Deletes an image. For an anonymous image, {id} must be the image's deletehash.
                If the image belongs to your account then passing the ID of the image is sufficient.
            </summary>
            <param name="imageId">The image id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ImageEndpoint.FavoriteImageAsync(System.String)">
            <summary>
                Favorite an image with the given ID. OAuth authentication required.
            </summary>
            <param name="imageId">The image id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ImageEndpoint.GetImageAsync(System.String)">
            <summary>
                Get information about an image.
            </summary>
            <param name="imageId">The image id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ImageEndpoint.UpdateImageAsync(System.String,System.String,System.String)">
            <summary>
                Updates the title or description of an image.
                You can only update an image you own and is associated with your account.
                For an anonymous image, {id} must be the image's deletehash.
            </summary>
            <param name="imageId">The image id.</param>
            <param name="title">The title of the image.</param>
            <param name="description">The description of the image.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ImageEndpoint.UploadImageBinaryAsync(System.Byte[],System.String,System.String,System.String)">
            <summary>
                Upload a new image using a binary file.
            </summary>
            <param name="image">A binary file.</param>
            <param name="albumId">
                The id of the album you want to add the image to. For anonymous albums, {albumId} should be the
                deletehash that is returned at creation.
            </param>
            <param name="title">The title of the image.</param>
            <param name="description">The description of the image.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ImageEndpoint.UploadImageStreamAsync(System.IO.Stream,System.String,System.String,System.String)">
            <summary>
                Upload a new image using a stream.
            </summary>
            <param name="image">A stream.</param>
            <param name="albumId">
                The id of the album you want to add the image to. For anonymous albums, {albumId} should be the
                deletehash that is returned at creation.
            </param>
            <param name="title">The title of the image.</param>
            <param name="description">The description of the image.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.ImageEndpoint.UploadImageUrlAsync(System.String,System.String,System.String,System.String)">
            <summary>
                Upload a new image using a URL.
            </summary>
            <param name="image">The URL for the image.</param>
            <param name="albumId">
                The id of the album you want to add the image to. For anonymous albums, {albumId} should be the
                deletehash that is returned at creation.
            </param>
            <param name="title">The title of the image.</param>
            <param name="description">The description of the image.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.Impl.MemeGenEndpoint">
            <summary>
                Meme related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.MemeGenEndpoint.#ctor(Imgur.API.Authentication.IApiClient)">
            <summary>
                Initializes a new instance of the MemeGenEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.MemeGenEndpoint.#ctor(Imgur.API.Authentication.IApiClient,System.Net.Http.HttpClient)">
            <summary>
                Initializes a new instance of the MemeGenEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <param name="httpClient"> The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.MemeGenEndpoint.GetDefaultMemesAsync">
            <summary>
                Get the list of default memes.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.Impl.NotificationEndpoint">
            <summary>
                Notification related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.NotificationEndpoint.#ctor(Imgur.API.Authentication.IApiClient)">
            <summary>
                Initializes a new instance of the NotificationsEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.NotificationEndpoint.#ctor(Imgur.API.Authentication.IApiClient,System.Net.Http.HttpClient)">
            <summary>
                Initializes a new instance of the NotificationsEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <param name="httpClient"> The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.NotificationEndpoint.GetNotificationAsync(System.String)">
            <summary>
                Returns the data about a specific notification.
                OAuth authentication required.
            </summary>
            <param name="notificationId">The notification id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.NotificationEndpoint.GetNotificationsAsync(System.Boolean)">
            <summary>
                Returns all of the notifications for the user.
                OAuth authentication required.
            </summary>
            <param name="newNotifications">false for all notifications, true for only non-viewed notification. Default is true.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.NotificationEndpoint.MarkNotificationsViewedAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Marks notifications as viewed.
                OAuth authentication required.
            </summary>
            <param name="ids">The notification id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.NotificationEndpoint.MarkNotificationViewedAsync(System.String)">
            <summary>
                Marks a notification as viewed.
                OAuth authentication required.
            </summary>
            <param name="notificationId">The notification id.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.Impl.OAuth2Endpoint">
            <summary>
                Authorizes account access.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.OAuth2Endpoint.#ctor(Imgur.API.Authentication.IApiClient)">
            <summary>
                Initializes a new instance of the OAuth2Endpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.OAuth2Endpoint.#ctor(Imgur.API.Authentication.IApiClient,System.Net.Http.HttpClient)">
            <summary>
                Initializes a new instance of the OAuth2Endpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <param name="httpClient"> The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.OAuth2Endpoint.GetAuthorizationUrl(Imgur.API.Enums.OAuth2ResponseType,System.String)">
            <summary>
                Creates an authorization url that can be used to authorize access to a user's account.
            </summary>
            <param name="oAuth2ResponseType">Determines if Imgur returns a Code, a PIN code, or an opaque Token.</param>
            <param name="state">
                This optional parameter indicates any state which may be useful to your application upon receipt of
                the response.
            </param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.OAuth2Endpoint.GetTokenByCodeAsync(System.String)">
            <summary>
                After the user authorizes, the pin is returned as a code to your application
                via the redirect URL you specified during registration, in the form of a regular query string parameter.
            </summary>
            <param name="code">The code from the query string.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.OAuth2Endpoint.GetTokenByPinAsync(System.String)">
            <summary>
                After the user authorizes, they will receive a PIN code that they copy into your app.
            </summary>
            <param name="pin">The PIN that the user is prompted to enter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.OAuth2Endpoint.GetTokenByRefreshTokenAsync(System.String)">
            <summary>
                If a user has authorized their account but you no longer have a valid access_token for them,
                then a new one can be generated by using the refreshToken.
                <para>
                    When your application receives a refresh token, it is important to store
                    that refresh token for future use.
                </para>
                <para>
                    If your application loses the refresh token, you will have to prompt the user
                    for their login information again.
                </para>
            </summary>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.Impl.RateLimitEndpoint">
            <summary>
                Gets credit limit.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.RateLimitEndpoint.#ctor(Imgur.API.Authentication.IApiClient)">
            <summary>
                Initializes a new instance of the RateLimitEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.RateLimitEndpoint.#ctor(Imgur.API.Authentication.IApiClient,System.Net.Http.HttpClient)">
            <summary>
                Initializes a new instance of the RateLimitEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <param name="httpClient"> The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.RateLimitEndpoint.GetRateLimitAsync">
            <summary>
                Gets remaining credits for the application.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Endpoints.Impl.TopicEndpoint">
            <summary>
                Topic related actions.
            </summary>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.TopicEndpoint.#ctor(Imgur.API.Authentication.IApiClient)">
            <summary>
                Initializes a new instance of the TopicEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.TopicEndpoint.#ctor(Imgur.API.Authentication.IApiClient,System.Net.Http.HttpClient)">
            <summary>
                Initializes a new instance of the TopicEndpoint class.
            </summary>
            <param name="apiClient">The type of client that will be used for authentication.</param>
            <param name="httpClient"> The class for sending HTTP requests and receiving HTTP responses from the endpoint methods.</param>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.TopicEndpoint.GetDefaultTopicsAsync">
            <summary>
                Get the list of default topics.
            </summary>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.TopicEndpoint.GetGalleryTopicItemAsync(System.String,System.String)">
            <summary>
                View a single item in a gallery topic.
            </summary>
            <param name="galleryItemId">The gallery item id.</param>
            <param name="topicId">
                The ID or URL-formatted name of the topic. If using a topic's name, replace its spaces with
                underscores (Mother's_Day).
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.Endpoints.Impl.TopicEndpoint.GetGalleryTopicItemsAsync(System.String,System.Nullable{Imgur.API.Enums.CustomGallerySortOrder},System.Nullable{Imgur.API.Enums.TimeWindow},System.Nullable{System.Int32})">
            <summary>
                View gallery items for a topic.
            </summary>
            <param name="topicId">
                The ID or URL-formatted name of the topic. If using a topic's name, replace its spaces with
                underscores (Mother's_Day).
            </param>
            <param name="sort">The order that the gallery should be sorted by. Default: Viral</param>
            <param name="window">The time period that should be used in filtering requests. Default: Week</param>
            <param name="page">The data paging number. Default: null</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
            <exception cref="T:Imgur.API.ImgurException">Thrown when an error is found in a response from an Imgur endpoint.</exception>
            <exception cref="T:Imgur.API.MashapeException">Thrown when an error is found in a response from a Mashape endpoint.</exception>
            <returns></returns>
        </member>
        <member name="T:Imgur.API.Enums.AccountGallerySortOrder">
            <summary>
                The order that the account gallery should be sorted by.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.AccountGallerySortOrder.Newest">
            <summary>
                Sort the account gallery by the newest items first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.AccountGallerySortOrder.Oldest">
            <summary>
                Sort the account gallery by the oldest items first.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.AlbumLayout">
            <summary>
                The album's display layout.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.AlbumLayout.Blog">
            <summary>
                Blog layout.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.AlbumLayout.Grid">
            <summary>
                Grid layout.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.AlbumLayout.Horizontal">
            <summary>
                Horizontal layout.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.AlbumLayout.Vertical">
            <summary>
                Vertial layout.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.AlbumPrivacy">
            <summary>
                The album's privacy setting.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.AlbumPrivacy.Public">
            <summary>
                Anyone can see this album.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.AlbumPrivacy.Secret">
            <summary>
                This album is hidden from the public albums view, but will still be accessible from via the direct URL.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.AlbumPrivacy.Hidden">
            <summary>
                Only the creator can see or access this album.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.CommentSortOrder">
            <summary>
                The order that the comments should be sorted by.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.CommentSortOrder.Newest">
            <summary>
                Sort the comments by the newest comments first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.CommentSortOrder.Oldest">
            <summary>
                Sort the comments by the oldest comments first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.CommentSortOrder.Best">
            <summary>
                Sort the comments by the best rated comments first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.CommentSortOrder.Worst">
            <summary>
                Sort the comments by the worst rated comments first.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.CustomGallerySortOrder">
            <summary>
                The order that the gallery should be sorted by.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.CustomGallerySortOrder.Viral">
            <summary>
                Sort the gallery by the most viral item first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.CustomGallerySortOrder.Time">
            <summary>
                Sort the gallery by the most recent item first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.CustomGallerySortOrder.Top">
            <summary>
                Sort the gallery by the most top rated item in a period first.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.GallerySection">
            <summary>
                The gallery section.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.GallerySection.Hot">
            <summary>
                The Hot section.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.GallerySection.Top">
            <summary>
                The Top section.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.GallerySection.User">
            <summary>
                The User section.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.GallerySortOrder">
            <summary>
                The order that the gallery should be sorted by.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.GallerySortOrder.Viral">
            <summary>
                Sort the gallery by the most viral item first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.GallerySortOrder.Time">
            <summary>
                Sort the gallery by the most recent item first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.GallerySortOrder.Top">
            <summary>
                Sort the gallery by the most top rated item in a period first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.GallerySortOrder.Rising">
            <summary>
                Sort the gallery by the rising items.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.GalleryTagSortOrder">
            <summary>
                The order that the images in the gallery tag should be sorted by.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.GalleryTagSortOrder.Viral">
            <summary>
                Sort the gallery by the most viral item first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.GalleryTagSortOrder.Time">
            <summary>
                Sort the gallery by the most recent item first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.GalleryTagSortOrder.Top">
            <summary>
                Sort the gallery by the most top rated item in a period first.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.ImageFileType">
            <summary>
                Searchable file types.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ImageFileType.Jpg">
            <summary>
                Jpg.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ImageFileType.Png">
            <summary>
                Png.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ImageFileType.Gif">
            <summary>
                Gif (non-animated).
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ImageFileType.Anigif">
            <summary>
                Gif (animated).
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ImageFileType.Album">
            <summary>
                Album.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.ImageSize">
            <summary>
                Searchable image sizes.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ImageSize.Small">
            <summary>
                Small (500 pixels square or less).
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ImageSize.Med">
            <summary>
                Med (500 to 2,000 pixels square).
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ImageSize.Big">
            <summary>
                Big (2,000 to 5,000 pixels square).
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ImageSize.Lrg">
            <summary>
                Lrg (5,000 to 10,000 pixels square).
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ImageSize.Huge">
            <summary>
                Huge (10,000 square pixels and above).
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.MemesGallerySortOrder">
            <summary>
                The order that the gallery should be sorted by.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.MemesGallerySortOrder.Viral">
            <summary>
                Sort the gallery by the most viral item first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.MemesGallerySortOrder.Time">
            <summary>
                Sort the gallery by the most recent item first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.MemesGallerySortOrder.Top">
            <summary>
                Sort the gallery by the most top rated item in a period first.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.NotorietyLevel">
            <summary>
                Notoriety level based on a user's reputation.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.NotorietyLevel.ForeverAlone">
            <summary>
                Reputation less than 0.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.NotorietyLevel.Neutral">
            <summary>
                Reputation between 0 and 399
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.NotorietyLevel.Accepted">
            <summary>
                Reputation between 400 and 999.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.NotorietyLevel.Liked">
            <summary>
                Reputation between 1,000 and 1,999.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.NotorietyLevel.Trusted">
            <summary>
                Reputation between 2,000 and 3,999.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.NotorietyLevel.Idolized">
            <summary>
                Reputation between 4,000 and 7,999.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.NotorietyLevel.Renowned">
            <summary>
                Reputation between 8,000 and 19,999.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.NotorietyLevel.Glorious">
            <summary>
                Reputation equal or greater than 20,000.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.OAuth2ResponseType">
            <summary>
                Determines if Imgur returns a Code, a PIN code, or an opaque Token.
                The value of this parameter determines which OAuth 2.0 flow will be used and impacts the processing your
                application will need to perform.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.OAuth2ResponseType.Code">
            <summary>
                If you choose code, then you must immediately exchange the Code for a Token.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.OAuth2ResponseType.Token">
            <summary>
                If you chose token, then the AccessToken and RefreshToken will be given to you
                in the form of query string parameters attached to your redirect URL, which the user may be able to read.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.OAuth2ResponseType.Pin">
            <summary>
                If you chose pin, then the user will receive a PIN code that they will enter into your app to complete the
                authorization process.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.ReportReason">
            <summary>
                A reason why content is inappropriate.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ReportReason.DoesNotBelong">
            <summary>
                Doesn't belong on Imgur.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ReportReason.Spam">
            <summary>
                Spam.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ReportReason.Abusive">
            <summary>
                Abusive.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ReportReason.MatureContentNotMarked">
            <summary>
                Mature content not marked as mature.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.ReportReason.Pornography">
            <summary>
                Pornography.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.SubredditGallerySortOrder">
            <summary>
                The order that the gallery should be sorted by.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.SubredditGallerySortOrder.Time">
            <summary>
                Sort the gallery by the most recent item first.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.SubredditGallerySortOrder.Top">
            <summary>
                Sort the gallery by the most top rated item in a period first.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.TimeWindow">
            <summary>
                The time period that should be used in filtering requests.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.TimeWindow.Day">
            <summary>
                Include the last day only in the request.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.TimeWindow.Week">
            <summary>
                Include the last week only in the request.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.TimeWindow.Month">
            <summary>
                Include the last month only in the request.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.TimeWindow.Year">
            <summary>
                Include the last year only in the request.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.TimeWindow.All">
            <summary>
                Include all in the request.
            </summary>
        </member>
        <member name="T:Imgur.API.Enums.VoteOption">
            <summary>
                Options for voting on content.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.VoteOption.Up">
            <summary>
                Vote Up.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.VoteOption.Down">
            <summary>
                Vote Down.
            </summary>
        </member>
        <member name="F:Imgur.API.Enums.VoteOption.Veto">
            <summary>
                Veto the last vote.
            </summary>
        </member>
        <member name="T:Imgur.API.JsonConverters.EpochTimeConverter">
            <summary>
                Converts Epoch (Unix) timestamps to DateTimeOffsets.
            </summary>
        </member>
        <member name="M:Imgur.API.JsonConverters.EpochTimeConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.JsonConverters.EpochTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Reads the JSON representation of the object.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.JsonConverters.EpochTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Imgur.API.JsonConverters.GalleryItemConverter">
            <summary>
                Converts Gallery items to their appropriate type.
            </summary>
        </member>
        <member name="M:Imgur.API.JsonConverters.GalleryItemConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.JsonConverters.GalleryItemConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.JsonConverters.GalleryItemConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Imgur.API.JsonConverters.NotificationConverter">
            <summary>
                Converts Notifications to their appropriate type.
            </summary>
        </member>
        <member name="M:Imgur.API.JsonConverters.NotificationConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.JsonConverters.NotificationConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.JsonConverters.NotificationConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Imgur.API.JsonConverters.TypeConverter`1">
            <summary>
                Converts objects to concrete classes.
            </summary>
        </member>
        <member name="M:Imgur.API.JsonConverters.TypeConverter`1.CanConvert(System.Type)">
            <summary>
                Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.JsonConverters.TypeConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns></returns>
        </member>
        <member name="M:Imgur.API.JsonConverters.TypeConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Imgur.API.Models.IAccount">
            <summary>
                This model is used to represent the basic account information.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccount.Bio">
            <summary>
                A basic description the user has filled out.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccount.Created">
            <summary>
                Utc timestamp of account creation, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccount.Id">
            <summary>
                The account id for the username requested.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccount.Notoriety">
            <summary>
                Notoriety level based on the account's reputation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccount.Reputation">
            <summary>
                The reputation for the account, in its numerical format.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccount.Url">
            <summary>
                The account username, will be the same as requested in the URL.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IAccountSettings">
            <summary>
                The account settings.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccountSettings.AccountUrl">
            <summary>
                The account username.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccountSettings.AcceptedGalleryTerms">
            <summary>
                True if the user has accepted the terms of uploading to the Imgur gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccountSettings.ActiveEmails">
            <summary>
                The email addresses that have been activated to allow uploading.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccountSettings.AlbumPrivacy">
            <summary>
                Set the album privacy to this privacy setting on creation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccountSettings.BlockedUsers">
            <summary>
                A list of users that have been blocked from messaging.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccountSettings.Email">
            <summary>
                The users email address.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccountSettings.HighQuality">
            <summary>
                The users ability to upload higher quality images, there will be less compression.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccountSettings.MessagingEnabled">
            <summary>
                If the user is accepting incoming messages or not.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccountSettings.PublicImages">
            <summary>
                Automatically allow all images to be publicly accessible.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAccountSettings.ShowMature">
            <summary>
                True if the user has opted to have mature images displayed in gallery list endpoints.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IAlbum">
            <summary>
                The data for albums.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.AccountId">
            <summary>
                The account ID or null if it's anonymous.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.AccountUrl">
            <summary>
                The account username or null if it's anonymous.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.Cover">
            <summary>
                The ID of the album cover image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.CoverHeight">
            <summary>
                The height, in pixels, of the album cover image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.CoverWidth">
            <summary>
                The width, in pixels, of the album cover image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.DateTime">
            <summary>
                Utc timestamp of when the album was inserted into the gallery, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.DeleteHash">
            <summary>
                OPTIONAL, the deletehash, if you're logged in as the album owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.Description">
            <summary>
                The description of the album in the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.Favorite">
            <summary>
                Indicates if the current user favorited the image. Defaults to false if not signed in.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.Id">
            <summary>
                The ID for the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.InGallery">
            <summary>
                True if the album has been submitted to the gallery, false if otherwise.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.Images">
            <summary>
                A list of all the images in the album (only available when requesting the direct album).
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.ImagesCount">
            <summary>
                The total number of images in the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.Layout">
            <summary>
                The view layout of the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.Link">
            <summary>
                The URL link to the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.Nsfw">
            <summary>
                Indicates if the image has been marked as nsfw or not. Defaults to null if information is not available.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.Order">
            <summary>
                Order number of the album on the user's album page (defaults to 0 if their albums haven't been reordered).
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.Privacy">
            <summary>
                The privacy level of the album, you can only view public if not logged in as album owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.Section">
            <summary>
                If the image has been categorized then this will contain the section the image belongs in. (funny, cats,
                adviceanimals, wtf, etc)
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.Title">
            <summary>
                The title of the album in the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IAlbum.Views">
            <summary>
                The number of album views.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IBasic`1">
            <summary>
                A response from the API.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Imgur.API.Models.IBasic`1.Data">
            <summary>
                The data returned from the response.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IBasic`1.Status">
            <summary>
                HTTP Status Code.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IBasic`1.Success">
            <summary>
                Was the request successful.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IBlockedUser">
            <summary>
                A user that has been blocked from messaging.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IBlockedUser.BlockedId">
            <summary>
                The account id of the user.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IBlockedUser.BlockedUrl">
            <summary>
                The account username.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IComment">
            <summary>
                An image's comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.AlbumCover">
            <summary>
                The ID of the album cover image, this is what should be displayed for album comments.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.Author">
            <summary>
                Username of the author of the comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.AuthorId">
            <summary>
                The account ID for the author.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.Children">
            <summary>
                All of the replies for this comment. If there are no replies to the comment then this is an empty set.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.CommentText">
            <summary>
                The comment itself.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.DateTime">
            <summary>
                Utc timestamp of creation, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.Deleted">
            <summary>
                Marked true if this caption has been deleted.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.Downs">
            <summary>
                The number of downvotes for the comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.Id">
            <summary>
                The ID for the comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.ImageId">
            <summary>
                The Id of the image that the comment is for.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.OnAlbum">
            <summary>
                If this comment was done to an album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.ParentId">
            <summary>
                If this is a reply, this will be the value of the CommentId for the caption this a reply for.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.Platform">
            <summary>
                The platform the comment was made on (Android, Desktop etc).
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.Points">
            <summary>
                The number of upvotes - downvotes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.Ups">
            <summary>
                Number of upvotes for the comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IComment.Vote">
            <summary>
                The current user's vote on the comment. null if not signed in or if the user hasn't voted on it.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.ICommentNotification">
            <summary>
                A notification of a new comment.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IConversation">
            <summary>
                A conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IConversation.DateTime">
            <summary>
                Utc timestamp of last sent message, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IConversation.Done">
            <summary>
                OPTIONAL: (only available when requesting a specific conversation).
                Flag to indicate whether you've reached the beginning of the thread.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IConversation.Id">
            <summary>
                Conversation ID
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IConversation.LastMessagePreview">
            <summary>
                Preview of the last message
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IConversation.MessageCount">
            <summary>
                Total number of messages in the conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IConversation.Messages">
            <summary>
                OPTIONAL: (only available when requesting a specific conversation).
                Reverse sorted such that most recent message is at the end of the array.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IConversation.Page">
            <summary>
                OPTIONAL: (only available when requesting a specific conversation)
                Number of the next page.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IConversation.WithAccount">
            <summary>
                Account ID of the other user in conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IConversation.WithAccountId">
            <summary>
                Account ID of the other user in conversation.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.ICustomGallery">
            <summary>
                A user's custom or filtered gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ICustomGallery.AccountUrl">
            <summary>
                Username of the account that created the custom gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ICustomGallery.ItemCount">
            <summary>
                The total number of gallery items in the custom gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ICustomGallery.Items">
            <summary>
                A list of all the gallery items in the custom gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ICustomGallery.Link">
            <summary>
                The URL link to the custom gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ICustomGallery.Tags">
            <summary>
                An list of all the tag names in the custom gallery.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IDataModel">
            <summary>
                Base Interface for models.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IGalleryAlbum">
            <summary>
                The data model formatted for gallery albums.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.AccountId">
            <summary>
                The account ID or null if it's anonymous.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.AccountUrl">
            <summary>
                The account username or null if it's anonymous.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.CommentCount">
            <summary>
                Number of comments on the gallery item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Cover">
            <summary>
                The ID of the album cover image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.CoverHeight">
            <summary>
                The height, in pixels, of the album cover image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.CoverWidth">
            <summary>
                The width, in pixels, of the album cover image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.DateTime">
            <summary>
                Utc timestamp of when the album was inserted into the gallery, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.DeleteHash">
            <summary>
                OPTIONAL, the deletehash, if you're logged in as the album owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Description">
            <summary>
                The description of the album in the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Downs">
            <summary>
                Number of downvotes for the item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Favorite">
            <summary>
                Indicates if the current user favorited the image. Defaults to false if not signed in.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Id">
            <summary>
                The ID for the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Images">
            <summary>
                A list of all the images in the album (only available when requesting the direct album).
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.ImagesCount">
            <summary>
                The total number of images in the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Layout">
            <summary>
                The view layout of the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Link">
            <summary>
                The URL link to the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Nsfw">
            <summary>
                Indicates if the image has been marked as nsfw or not. Defaults to null if information is not available.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Order">
            <summary>
                Order number of the album on the user's album page (defaults to 0 if their albums haven't been reordered).
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Points">
            <summary>
                Upvotes minus downvotes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Privacy">
            <summary>
                The privacy level of the album, you can only view public if not logged in as album owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Score">
            <summary>
                Imgur popularity score.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Section">
            <summary>
                If the image has been categorized then this will contain the section the image belongs in. (funny, cats,
                adviceanimals, wtf, etc)
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Title">
            <summary>
                The title of the album in the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Topic">
            <summary>
                Topic of the gallery item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.TopicId">
            <summary>
                Topic ID of the gallery item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Ups">
            <summary>
                Upvotes for the item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Views">
            <summary>
                The number of album views.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryAlbum.Vote">
            <summary>
                The current user's vote on the item. null if not signed in or if the user hasn't voted on it.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IGalleryImage">
            <summary>
                The data model formatted for gallery images.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.AccountId">
            <summary>
                The account ID for the uploader, or null.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.AccountUrl">
            <summary>
                The username of the account that uploaded it, or null.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Animated">
            <summary>
                Is the image animated.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Bandwidth">
            <summary>
                Bandwidth consumed by the image in bytes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.CommentCount">
            <summary>
                Number of comments on the gallery item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.DateTime">
            <summary>
                Utc timestamp of when the image was uploaded, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.DeleteHash">
            <summary>
                OPTIONAL, the deletehash, if you're logged in as the image owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Description">
            <summary>
                Description of the image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Downs">
            <summary>
                Number of downvotes for the item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Favorite">
            <summary>
                Indicates if the current user favorited the image. Defaults to false if not signed in.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Gifv">
            <summary>
                OPTIONAL, The .gifv link. Only available if the image is animated and type is 'image/gif'.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Height">
            <summary>
                The height of the image in pixels.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Id">
            <summary>
                The ID for the image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Link">
            <summary>
                The direct link to the the image. (Note: if fetching an animated GIF that was over 20MB in original size, a .gif
                thumbnail will be returned)
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Looping">
            <summary>
                OPTIONAL, Whether the image has a looping animation. Only available if the image is animated and type is
                'image/gif'.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Mp4">
            <summary>
                OPTIONAL, The direct link to the .mp4. Only available if the image is animated and type is 'image/gif'.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Mp4Size">
            <summary>
                OPTIONAL, The Content-Length of the .mp4. Only available if the image is animated and type is 'image/gif'. Note
                that a zero value (0) is possible if the video has not yet been generated.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Name">
            <summary>
                OPTIONAL, the original filename, if you're logged in as the image owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Nsfw">
            <summary>
                Indicates if the image has been marked as nsfw or not. Defaults to null if information is not available.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Points">
            <summary>
                Upvotes minus downvotes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Score">
            <summary>
                Imgur popularity score.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Section">
            <summary>
                If the image has been categorized then this will contain the section the image belongs in. (funny, cats,
                adviceanimals, wtf, etc)
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Size">
            <summary>
                The size of the image in bytes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Title">
            <summary>
                The title of the image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Topic">
            <summary>
                Topic of the gallery item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.TopicId">
            <summary>
                Topic ID of the gallery item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Type">
            <summary>
                Image MIME type.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Ups">
            <summary>
                Upvotes for the item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Views">
            <summary>
                The number of image views.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Vote">
            <summary>
                The current user's vote on the album. null if not signed in, if the user hasn't voted on it, or if not submitted to
                the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryImage.Width">
            <summary>
                The width of the image in pixels.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IGalleryItem">
            <summary>
                Any gallery type such as GalleryImage or GalleryAlbum.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IGalleryProfile">
            <summary>
                The totals for a users gallery information.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryProfile.TotalGalleryComments">
            <summary>
                Total number of comments the user has made in the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryProfile.TotalGalleryFavorites">
            <summary>
                Total number of items favorited by the user in the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryProfile.TotalGallerySubmissions">
            <summary>
                Total number of images submitted by the user.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IGalleryProfile.Trophies">
            <summary>
                A list of trophies that the user has.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IImage">
            <summary>
                An image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Animated">
            <summary>
                Is the image animated.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Bandwidth">
            <summary>
                Bandwidth consumed by the image in bytes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.DateTime">
            <summary>
                Utc timestamp of when the image was uploaded, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.DeleteHash">
            <summary>
                OPTIONAL, the deletehash, if you're logged in as the image owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Description">
            <summary>
                Description of the image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Favorite">
            <summary>
                Indicates if the current user favorited the image. Defaults to false if not signed in.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Gifv">
            <summary>
                OPTIONAL, The .gifv link. Only available if the image is animated and type is 'image/gif'.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Height">
            <summary>
                The height of the image in pixels.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Id">
            <summary>
                The ID for the image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.InGallery">
            <summary>
                True if the image has been submitted to the gallery, false if otherwise.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Link">
            <summary>
                The direct link to the the image. (Note: if fetching an animated GIF that was over 20MB in original size, a .gif
                thumbnail will be returned)
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Looping">
            <summary>
                OPTIONAL, Whether the image has a looping animation. Only available if the image is animated and type is
                'image/gif'.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Mp4">
            <summary>
                OPTIONAL, The direct link to the .mp4. Only available if the image is animated and type is 'image/gif'.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Mp4Size">
            <summary>
                OPTIONAL, The Content-Length of the .mp4. Only available if the image is animated and type is 'image/gif'. Note
                that a zero value (0) is possible if the video has not yet been generated.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Name">
            <summary>
                OPTIONAL, the original filename, if you're logged in as the image owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Nsfw">
            <summary>
                Indicates if the image has been marked as nsfw or not. Defaults to null if information is not available.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Section">
            <summary>
                If the image has been categorized then this will contain the section the image belongs in. (funny, cats,
                adviceanimals, wtf, etc)
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Size">
            <summary>
                The size of the image in bytes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Title">
            <summary>
                The title of the image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Type">
            <summary>
                Image MIME type.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Views">
            <summary>
                The number of image views.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Vote">
            <summary>
                The current user's vote on the album. null if not signed in, if the user hasn't voted on it, or if not submitted to
                the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImage.Width">
            <summary>
                The width of the image in pixels.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IImgurError">
            <summary>
                An error returned after an Endpoint request.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImgurError.Error">
            <summary>
                A description of the error.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImgurError.Method">
            <summary>
                The HttpMethod that was used to send the request.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IImgurError.Request">
            <summary>
                The request Uri that the error came from.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IMashapeError">
            <summary>
                An error returned after an Endpoint request.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMashapeError.Message">
            <summary>
                A description of the error.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IMessage">
            <summary>
                A message from another user.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessage.AccountId">
            <summary>
                The account ID of the person receiving the message.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessage.Body">
            <summary>
                Text of the message.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessage.ConversationId">
            <summary>
                ID for the overall conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessage.DateTime">
            <summary>
                Time message was sent, epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessage.From">
            <summary>
                Account username of person sending the message.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessage.Id">
            <summary>
                The ID for the message.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessage.SenderId">
            <summary>
                The account ID of the person who sent the message.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IMessageNotification">
            <summary>
                A notification of a new message.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessageNotification.AccountId">
            <summary>
                Account ID of the user in conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessageNotification.DateTime">
            <summary>
                Utc timestamp of last sent message, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessageNotification.From">
            <summary>
                The username of the other user in conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessageNotification.Id">
            <summary>
                Conversation ID
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessageNotification.LastMessage">
            <summary>
                The last message
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessageNotification.MessageNum">
            <summary>
                Total number of messages in the conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IMessageNotification.WithAccount">
            <summary>
                Account ID of the other user in conversation.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.INotification">
            <summary>
                A notification.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.INotification.AccountId">
            <summary>
                The Account ID for the notification
            </summary>
        </member>
        <member name="P:Imgur.API.Models.INotification.Content">
            <summary>
                This can be any other model.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.INotification.Id">
            <summary>
                The ID for the notification
            </summary>
        </member>
        <member name="P:Imgur.API.Models.INotification.Viewed">
            <summary>
                Has the user viewed the notification yet?
            </summary>
        </member>
        <member name="T:Imgur.API.Models.INotifications">
            <summary>
                Account notifications.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.INotifications.Messages">
            <summary>
                A list of message notifications.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.INotifications.Replies">
            <summary>
                A list of comment notifications.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IOAuth2Token">
            <summary>
                An OAuth2 Token used for actions against a user's account.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IOAuth2Token.AccessToken">
            <summary>
                The user's access token.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IOAuth2Token.AccountId">
            <summary>
                The user's account id.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IOAuth2Token.AccountUsername">
            <summary>
                The user's account username.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IOAuth2Token.ExpiresAt">
            <summary>
                The DateTimeOffset when the token expires. Usually one month from when the token was created.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IOAuth2Token.ExpiresIn">
            <summary>
                The time in seconds when the token expires. Usually one month from when the token was created.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IOAuth2Token.RefreshToken">
            <summary>
                The user's refresh token.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IOAuth2Token.TokenType">
            <summary>
                The type of token that was requested, usually "bearer".
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IRateLimit">
            <summary>
                Remaining credits for the application.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IRateLimit.ClientLimit">
            <summary>
                Total credits that can be allocated for the application in a day.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IRateLimit.ClientRemaining">
            <summary>
                Total credits remaining for the application in a day.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.ITag">
            <summary>
                A tag.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITag.Followers">
            <summary>
                Number of followers for the tag.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITag.Following">
            <summary>
                OPTIONAL, boolean representing whether or not the user is following the tag in their custom gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITag.Items">
            <summary>
                A list of all the gallery items in the custom gallery
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITag.Name">
            <summary>
                Name of the tag.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITag.TotalItems">
            <summary>
                Total number of gallery items for the tag.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.ITagVote">
            <summary>
                A tag vote.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITagVote.Author">
            <summary>
                Author of the tag.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITagVote.Downs">
            <summary>
                Number of downvotes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITagVote.Name">
            <summary>
                Name of the tag.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITagVote.Ups">
            <summary>
                Number of upvotes.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.ITagVotes">
            <summary>
                Tag vote data.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITagVotes.Tags">
            <summary>
                The list of tags.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.ITopic">
            <summary>
                A topic.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITopic.Css">
            <summary>
                CSS class used on website to style the ephemeral topic.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITopic.Description">
            <summary>
                Description of the topic.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITopic.Ephemeral">
            <summary>
                Whether it is an ephemeral (e.g. current events) topic.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITopic.Id">
            <summary>
                ID of the topic.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITopic.Name">
            <summary>
                Topic name.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITopic.TopPost">
            <summary>
                The top image in this topic.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITopic.HeroImage">
            <summary>
                The current 'hero' image or album chosen by the Imgur community staff.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITopic.IsHero">
            <summary>
                Whether the topic's HeroImage should be used as the overall hero image.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.ITrophy">
            <summary>
                An earned Trophy.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITrophy.Data">
            <summary>
                The ID of the image or the ID of the comment where the trophy was earned.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITrophy.DataLink">
            <summary>
                A link to where the trophy was earned.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITrophy.DateTime">
            <summary>
                Utc timestamp of when the trophy was earned, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITrophy.Description">
            <summary>
                A description of the trophy and how it was earned.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITrophy.Id">
            <summary>
                The ID of the trophy, this is unique to each trophy.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITrophy.Image">
            <summary>
                URL of the image representing the trophy.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITrophy.Name">
            <summary>
                The name of the trophy.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.ITrophy.NameClean">
            <summary>
                Can be thought of as the ID of a trophy type.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.IVote">
            <summary>
                A vote.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IVote.Downs">
            <summary>
                The number of downvotes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.IVote.Ups">
            <summary>
                Number of upvotes.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.Account">
            <summary>
                This model is used to represent the basic account information.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Account.Bio">
            <summary>
                A basic description the user has filled out.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Account.Created">
            <summary>
                Utc timestamp of account creation, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Account.Id">
            <summary>
                The account id for the username requested.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Account.Reputation">
            <summary>
                The reputation for the account, in its numerical format.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Account.Url">
            <summary>
                The account username, will be the same as requested in the URL.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Account.Notoriety">
            <summary>
                Notoriety level based on a user's reputation.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.AccountSettings">
            <summary>
                The account settings.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.AccountSettings.AccountUrl">
            <summary>
                The account username.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.AccountSettings.AcceptedGalleryTerms">
            <summary>
                True if the user has accepted the terms of uploading to the Imgur gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.AccountSettings.ActiveEmails">
            <summary>
                The email addresses that have been activated to allow uploading.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.AccountSettings.AlbumPrivacy">
            <summary>
                Set the album privacy to this privacy setting on creation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.AccountSettings.BlockedUsers">
            <summary>
                A list of users that have been blocked from messaging.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.AccountSettings.Email">
            <summary>
                The users email address.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.AccountSettings.HighQuality">
            <summary>
                The users ability to upload higher quality images, there will be less compression.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.AccountSettings.MessagingEnabled">
            <summary>
                If the user is accepting incoming messages or not.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.AccountSettings.PublicImages">
            <summary>
                Automatically allow all images to be publicly accessible.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.AccountSettings.ShowMature">
            <summary>
                True if the user has opted to have mature images displayed in gallery list endpoints.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.Album">
            <summary>
                The data for albums.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.AccountId">
            <summary>
                The account ID or null if it's anonymous.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.AccountUrl">
            <summary>
                The account username or null if it's anonymous.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.Cover">
            <summary>
                The ID of the album cover image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.CoverHeight">
            <summary>
                The height, in pixels, of the album cover image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.InGallery">
            <summary>
                True if the album has been submitted to the gallery, false if otherwise.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.DateTime">
            <summary>
                Utc timestamp of when the album was inserted into the gallery, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.DeleteHash">
            <summary>
                OPTIONAL, the deletehash, if you're logged in as the album owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.Description">
            <summary>
                The description of the album in the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.Favorite">
            <summary>
                Indicates if the current user favorited the album. Defaults to false if not signed in.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.Id">
            <summary>
                The ID for the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.CoverWidth">
            <summary>
                The width, in pixels, of the album cover image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.Images">
            <summary>
                A list of all the images in the album (only available when requesting the direct album).
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.ImagesCount">
            <summary>
                The total number of images in the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.Layout">
            <summary>
                The view layout of the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.Link">
            <summary>
                The URL link to the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.Nsfw">
            <summary>
                Indicates if the image has been marked as nsfw or not. Defaults to null if information is not available.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.Order">
            <summary>
                Order number of the album on the user's album page (defaults to 0 if their albums haven't been reordered).
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.Privacy">
            <summary>
                The privacy level of the album, you can only view public virtual if not logged in as album owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.Section">
            <summary>
                If the image has been categorized then this will contain the section the image belongs in. (funny, cats,
                adviceanimals, wtf, etc)
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.Title">
            <summary>
                The title of the album in the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Album.Views">
            <summary>
                The number of album views.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.Basic`1">
            <summary>
                A response from the API.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Imgur.API.Models.Impl.Basic`1.Data">
            <summary>
                The data returned from the response.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Basic`1.Status">
            <summary>
                HTTP Status Code.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Basic`1.Success">
            <summary>
                Was the request successful.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.BlockedUser">
            <summary>
                A user that has been blocked from messaging.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.BlockedUser.BlockedId">
            <summary>
                The account id of the user.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.BlockedUser.BlockedUrl">
            <summary>
                The account username.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.Comment">
            <summary>
                An image's comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.AlbumCover">
            <summary>
                The ID of the album cover image, this is what should be displayed for album comments.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.Author">
            <summary>
                Username of the author of the comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.AuthorId">
            <summary>
                The account ID for the author.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.Children">
            <summary>
                All of the replies for this comment. If there are no replies to the comment then this is an empty set.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.CommentText">
            <summary>
                The comment itself.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.DateTime">
            <summary>
                Utc timestamp of creation, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.Deleted">
            <summary>
                Marked true if this caption has been deleted.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.Downs">
            <summary>
                The number of downvotes for the comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.Id">
            <summary>
                The ID for the comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.ImageId">
            <summary>
                The Id of the image that the comment is for.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.OnAlbum">
            <summary>
                If this comment was done to an album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.ParentId">
            <summary>
                If this is a reply, this will be the value of the CommentId for the caption this a reply for.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.Platform">
            <summary>
                The platform the comment was made on (Android, Desktop etc).
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.Points">
            <summary>
                The number of upvotes - downvotes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.Ups">
            <summary>
                Number of upvotes for the comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Comment.Vote">
            <summary>
                The current user's vote on the comment. null if not signed in or if the user hasn't voted on it.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.CommentNotification">
            <summary>
                A notification of a new comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.AlbumCover">
            <summary>
                The ID of the album cover image, this is what should be displayed for album comments.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.Author">
            <summary>
                Username of the author of the comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.AuthorId">
            <summary>
                The account ID for the author.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.Children">
            <summary>
                All of the replies for this comment. If there are no replies to the comment then this is an empty set.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.CommentText">
            <summary>
                The comment itself.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.DateTime">
            <summary>
                Utc timestamp of creation, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.Deleted">
            <summary>
                Marked true if this caption has been deleted.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.Downs">
            <summary>
                The number of downvotes for the comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.Id">
            <summary>
                The ID for the comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.ImageId">
            <summary>
                The Id of the image that the comment is for.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.OnAlbum">
            <summary>
                If this comment was done to an album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.ParentId">
            <summary>
                If this is a reply, this will be the value of the CommentId for the caption this a reply for.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.Platform">
            <summary>
                The platform the comment was made on (Android, Desktop etc).
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.Points">
            <summary>
                The number of upvotes - downvotes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.Ups">
            <summary>
                Number of upvotes for the comment.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CommentNotification.Vote">
            <summary>
                The current user's vote on the comment. null if not signed in or if the user hasn't voted on it.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.Conversation">
            <summary>
                A conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Conversation.DateTime">
            <summary>
                Utc timestamp of last sent message, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Conversation.Done">
            <summary>
                OPTIONAL: (only available when requesting a specific conversation).
                Flag to indicate whether you've reached the beginning of the thread.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Conversation.Id">
            <summary>
                Conversation ID
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Conversation.LastMessagePreview">
            <summary>
                Preview of the last message
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Conversation.MessageCount">
            <summary>
                Total number of messages in the conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Conversation.Messages">
            <summary>
                OPTIONAL: (only available when requesting a specific conversation).
                Reverse sorted such that most recent message is at the end of the array.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Conversation.Page">
            <summary>
                OPTIONAL: (only available when requesting a specific conversation)
                Number of the next page.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Conversation.WithAccount">
            <summary>
                Account username of the other user in conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Conversation.WithAccountId">
            <summary>
                Account ID of the other user in conversation.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.CustomGallery">
            <summary>
                A user's custom or filtered gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CustomGallery.AccountUrl">
            <summary>
                Username of the account that created the custom gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CustomGallery.ItemCount">
            <summary>
                The total number of gallery items in the custom gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CustomGallery.Items">
            <summary>
                A list of all the gallery items in the custom gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CustomGallery.Link">
            <summary>
                The URL link to the custom gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.CustomGallery.Tags">
            <summary>
                An list of all the tag names in the custom gallery.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.GalleryAlbum">
            <summary>
                The data model formatted for gallery albums.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.AccountId">
            <summary>
                The account ID of the account that uploaded it, or null.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.AccountUrl">
            <summary>
                The account username or null if it's anonymous.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.CommentCount">
            <summary>
                Number of comments on the gallery item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Cover">
            <summary>
                The ID of the album cover image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.CoverHeight">
            <summary>
                The height, in pixels, of the album cover image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.CoverWidth">
            <summary>
                The width, in pixels, of the album cover image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.DateTime">
            <summary>
                Utc timestamp of when the album was inserted into the gallery, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.DeleteHash">
            <summary>
                OPTIONAL, the deletehash, if you're logged in as the album owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Description">
            <summary>
                The description of the album in the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Downs">
            <summary>
                Number of downvotes for the item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Favorite">
            <summary>
                Indicates if the current user favorited the album. Defaults to false if not signed in.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Id">
            <summary>
                The ID for the image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Images">
            <summary>
                A list of all the images in the album (only available when requesting the direct album).
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.ImagesCount">
            <summary>
                The total number of images in the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Layout">
            <summary>
                The view layout of the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Link">
            <summary>
                The URL link to the album.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Nsfw">
            <summary>
                Indicates if the image has been marked as nsfw or not. Defaults to null if information is not available.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Order">
            <summary>
                Order number of the album on the user's album page (defaults to 0 if their albums haven't been reordered).
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Points">
            <summary>
                Upvotes minus downvotes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Privacy">
            <summary>
                The privacy level of the album, you can only view public virtual if not logged in as album owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Score">
            <summary>
                Imgur popularity score.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Section">
            <summary>
                If the image has been categorized then this will contain the section the image belongs in. (funny, cats,
                adviceanimals, wtf, etc)
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Title">
            <summary>
                The title of the album in the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Topic">
            <summary>
                Topic of the gallery item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.TopicId">
            <summary>
                Topic ID of the gallery item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Ups">
            <summary>
                Upvotes for the item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Views">
            <summary>
                The number of album views.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryAlbum.Vote">
            <summary>
                The current user's vote on the album. null if not signed in or if the user hasn't voted on it.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.GalleryImage">
            <summary>
                The data model formatted for gallery images.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.AccountId">
            <summary>
                The account ID for the uploader, or null.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.AccountUrl">
            <summary>
                The username of the account that uploaded it, or null.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Animated">
            <summary>
                Is the image animated.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Bandwidth">
            <summary>
                Bandwidth consumed by the image in bytes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.CommentCount">
            <summary>
                Number of comments on the gallery item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.DateTime">
            <summary>
                Utc timestamp of when the image was inserted into the gallery, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.DeleteHash">
            <summary>
                OPTIONAL, the deletehash, if you're logged in as the image owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Description">
            <summary>
                Description of the image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Downs">
            <summary>
                Number of downvotes for the item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Favorite">
            <summary>
                Indicates if the current user favorited the image. Defaults to false if not signed in.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Gifv">
            <summary>
                OPTIONAL, The .gifv link. Only available if the image is animated and type is 'image/gif'.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Height">
            <summary>
                The height of the image in pixels.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Id">
            <summary>
                The ID for the image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Link">
            <summary>
                The direct link to the the image. (Note: if fetching an animated GIF that was over 20MB in original size, a .gif
                thumbnail will be returned)
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Looping">
            <summary>
                OPTIONAL, Whether the image has a looping animation. Only available if the image is animated and type is
                'image/gif'.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Mp4">
            <summary>
                OPTIONAL, The direct link to the .mp4. Only available if the image is animated and type is 'image/gif'.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Mp4Size">
            <summary>
                OPTIONAL, The Content-Length of the .mp4. Only available if the image is animated and type is 'image/gif'. Note
                that a zero value (0) is possible if the video has not yet been generated.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Name">
            <summary>
                OPTIONAL, the original filename, if you're logged in as the image owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Nsfw">
            <summary>
                Indicates if the image has been marked as nsfw or not. Defaults to null if information is not available.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Points">
            <summary>
                Upvotes minus downvotes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Score">
            <summary>
                Imgur popularity score.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Section">
            <summary>
                If the image has been categorized then this will contain the section the image belongs in. (funny, cats,
                adviceanimals, wtf, etc)
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Size">
            <summary>
                The size of the image in bytes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Title">
            <summary>
                The title of the image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Topic">
            <summary>
                Topic of the gallery item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.TopicId">
            <summary>
                Topic ID of the gallery item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Type">
            <summary>
                Image MIME type.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Ups">
            <summary>
                Upvotes for the item.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Views">
            <summary>
                The size of the image in bytes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Vote">
            <summary>
                The current user's vote on the album. null if not signed in, if the user hasn't voted on it, or if not submitted to
                the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryImage.Width">
            <summary>
                The width of the image in pixels.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.GalleryItem">
            <summary>
                Any gallery type such as GalleryImage or GalleryAlbum.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.GalleryProfile">
            <summary>
                The totals for a users gallery information.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryProfile.TotalGalleryComments">
            <summary>
                Total number of comments the user has made in the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryProfile.TotalGalleryFavorites">
            <summary>
                Total number of items favorited by the user in the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryProfile.TotalGallerySubmissions">
            <summary>
                Total number of images submitted by the user.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.GalleryProfile.Trophies">
            <summary>
                A list of trophies that the user has.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.Image">
            <summary>
                An image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Animated">
            <summary>
                Is the image animated.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Bandwidth">
            <summary>
                Bandwidth consumed by the image in bytes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.DateTime">
            <summary>
                Utc timestamp of when the image was uploaded, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.DeleteHash">
            <summary>
                OPTIONAL, the deletehash, if you're logged in as the image owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Description">
            <summary>
                Description of the image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Favorite">
            <summary>
                Indicates if the current user favorited the image. Defaults to false if not signed in.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Gifv">
            <summary>
                OPTIONAL, The .gifv link. Only available if the image is animated and type is 'image/gif'.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Height">
            <summary>
                The height of the image in pixels.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Id">
            <summary>
                The ID for the image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.InGallery">
            <summary>
                True if the image has been submitted to the gallery, false if otherwise.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Link">
            <summary>
                The direct link to the the image. (Note: if fetching an animated GIF that was over 20MB in original size, a .gif
                thumbnail will be returned)
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Looping">
            <summary>
                OPTIONAL, Whether the image has a looping animation. Only available if the image is animated and type is
                'image/gif'.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Mp4">
            <summary>
                OPTIONAL, The direct link to the .mp4. Only available if the image is animated and type is 'image/gif'.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Mp4Size">
            <summary>
                OPTIONAL, The Content-Length of the .mp4. Only available if the image is animated and type is 'image/gif'. Note
                that a zero value (0) is possible if the video has not yet been generated.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Name">
            <summary>
                OPTIONAL, the original filename, if you're logged in as the image owner.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Nsfw">
            <summary>
                Indicates if the image has been marked as nsfw or not. Defaults to null if information is not available.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Section">
            <summary>
                If the image has been categorized then this will contain the section the image belongs in. (funny, cats,
                adviceanimals, wtf, etc)
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Size">
            <summary>
                The size of the image in bytes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Title">
            <summary>
                The title of the image.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Type">
            <summary>
                Image MIME type.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Views">
            <summary>
                The size of the image in bytes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Vote">
            <summary>
                The current user's vote on the album. null if not signed in, if the user hasn't voted on it, or if not submitted to
                the gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Image.Width">
            <summary>
                The width of the image in pixels.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.ImgurError">
            <summary>
                An error returned after an Endpoint request.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.ImgurError.Error">
            <summary>
                A description of the error.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.ImgurError.Method">
            <summary>
                The HttpMethod that was used to send the request.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.ImgurError.Request">
            <summary>
                The request Uri that the error came from.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.MashapeError">
            <summary>
                An error returned after an Endpoint request.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.MashapeError.Message">
            <summary>
                A description of the error.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.Message">
            <summary>
                A message from another user.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Message.AccountId">
            <summary>
                The account ID of the person receiving the message.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Message.Body">
            <summary>
                Text of the message.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Message.ConversationId">
            <summary>
                ID for the overall conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Message.DateTime">
            <summary>
                Time message was sent, epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Message.From">
            <summary>
                Account username of person sending the message.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Message.Id">
            <summary>
                The ID for the message.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Message.SenderId">
            <summary>
                The account ID of the person who sent the message.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.MessageNotification">
            <summary>
                A notification of a new message.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.MessageNotification.AccountId">
            <summary>
                Account ID of the user in conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.MessageNotification.DateTime">
            <summary>
                Utc timestamp of last sent message, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.MessageNotification.From">
            <summary>
                The username of the other user in conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.MessageNotification.Id">
            <summary>
                Conversation ID
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.MessageNotification.LastMessage">
            <summary>
                The last message
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.MessageNotification.MessageNum">
            <summary>
                Total number of messages in the conversation.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.MessageNotification.WithAccount">
            <summary>
                Account ID of the other user in conversation.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.Notification">
            <summary>
                A notification.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Notification.AccountId">
            <summary>
                The Account ID for the notification
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Notification.Content">
            <summary>
                This can be any other model.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Notification.Id">
            <summary>
                The ID for the notification
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Notification.Viewed">
            <summary>
                Has the user viewed the notification yet?
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.Notifications">
            <summary>
                Account notifications.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Notifications.Messages">
            <summary>
                A list of message notifications.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Notifications.Replies">
            <summary>
                A list of comment notifications.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.OAuth2Token">
            <summary>
                The response from an OAuth2 Token request.
            </summary>
        </member>
        <member name="M:Imgur.API.Models.Impl.OAuth2Token.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
                Initializes a new instance of the OAuth2Token class.
            </summary>
            <param name="accessToken">The access token.</param>
            <param name="refreshToken">The refresh token.</param>
            <param name="tokenType">The type of token, typically "Bearer".</param>
            <param name="accountId">The account id.</param>
            <param name="accountUsername">The account username.</param>
            <param name="expiresIn">The time in seconds when the token expires. Usually one month from the request.</param>
        </member>
        <member name="P:Imgur.API.Models.Impl.OAuth2Token.AccessToken">
            <summary>
                The user's access token.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.OAuth2Token.AccountId">
            <summary>
                The user's account id.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.OAuth2Token.AccountUsername">
            <summary>
                The user's account username.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.OAuth2Token.ExpiresAt">
            <summary>
                The DateTimeOffset when the token expires. Usually one month from the request.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.OAuth2Token.ExpiresIn">
            <summary>
                The time in seconds when the token expires. Usually one month from the request.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.OAuth2Token.RefreshToken">
            <summary>
                The user's refresh token.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.OAuth2Token.TokenType">
            <summary>
                The type of token that was requested, usually "bearer".
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.RateLimit">
            <summary>
                Remaining credits for the application.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.RateLimit.ClientLimit">
            <summary>
                Total credits that can be allocated for the application in a day.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.RateLimit.ClientRemaining">
            <summary>
                Total credits remaining for the application in a day.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.Tag">
            <summary>
                A tag.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Tag.Followers">
            <summary>
                Number of followers for the tag.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Tag.Following">
            <summary>
                OPTIONAL, boolean representing whether or not the user is following the tag in their custom gallery.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Tag.Items">
            <summary>
                A list of all the gallery items in the custom gallery
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Tag.Name">
            <summary>
                Name of the tag.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Tag.TotalItems">
            <summary>
                Total number of gallery items for the tag.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.TagVote">
            <summary>
                A tag vote.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.TagVote.Author">
            <summary>
                Author of the tag.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.TagVote.Downs">
            <summary>
                Number of downvotes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.TagVote.Name">
            <summary>
                Name of the tag.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.TagVote.Ups">
            <summary>
                Number of upvotes.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.TagVotes">
            <summary>
                Tag vote data.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.TagVotes.Tags">
            <summary>
                The list of tags.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.Topic">
            <summary>
                A topic.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Topic.Css">
            <summary>
                CSS class used on website to style the ephemeral topic.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Topic.Description">
            <summary>
                Description of the topic.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Topic.Ephemeral">
            <summary>
                Whether it is an ephemeral (e.g. current events) topic.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Topic.Id">
            <summary>
                ID of the topic.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Topic.Name">
            <summary>
                Topic name.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Topic.TopPost">
            <summary>
                The top image in this topic.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Topic.HeroImage">
            <summary>
                The current 'hero' image or album chosen by the Imgur community staff.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Topic.IsHero">
            <summary>
                Whether the topic's HeroImage should be used as the overall hero image.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.Trophy">
            <summary>
                An earned Trophy.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Trophy.Data">
            <summary>
                The ID of the image or the ID of the comment where the trophy was earned.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Trophy.DataLink">
            <summary>
                A link to where the trophy was earned.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Trophy.DateTime">
            <summary>
                Utc timestamp of when the trophy was earned, converted from epoch time.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Trophy.Description">
            <summary>
                A description of the trophy and how it was earned.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Trophy.Id">
            <summary>
                The ID of the trophy, this is unique to each trophy.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Trophy.Image">
            <summary>
                URL of the image representing the trophy.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Trophy.Name">
            <summary>
                The name of the trophy.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Trophy.NameClean">
            <summary>
                Can be thought of as the ID of a trophy type.
            </summary>
        </member>
        <member name="T:Imgur.API.Models.Impl.Vote">
            <summary>
                A vote.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Vote.Downs">
            <summary>
                The number of downvotes.
            </summary>
        </member>
        <member name="P:Imgur.API.Models.Impl.Vote.Ups">
            <summary>
                Number of upvotes.
            </summary>
        </member>
        <member name="M:Imgur.API.RequestBuilders.AccountRequestBuilder.UpdateAccountSettingsRequest(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Imgur.API.Enums.AlbumPrivacy},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.AlbumRequestBuilder.AddAlbumImagesRequest(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.AlbumRequestBuilder.CreateAlbumRequest(System.String,System.String,System.String,System.Nullable{Imgur.API.Enums.AlbumPrivacy},System.Nullable{Imgur.API.Enums.AlbumLayout},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.AlbumRequestBuilder.RemoveAlbumImagesRequest(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.AlbumRequestBuilder.SetAlbumImagesRequest(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.AlbumRequestBuilder.UpdateAlbumRequest(System.String,System.String,System.String,System.Nullable{Imgur.API.Enums.AlbumPrivacy},System.Nullable{Imgur.API.Enums.AlbumLayout},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.CommentRequestBuilder.CreateCommentRequest(System.String,System.String,System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.CommentRequestBuilder.CreateGalleryItemCommentRequest(System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.CommentRequestBuilder.CreateReplyRequest(System.String,System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.ConversationRequestBuilder.CreateMessageRequest(System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.CustomGalleryRequestBuilder.AddCustomGalleryTagsRequest(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.CustomGalleryRequestBuilder.AddFilteredOutGalleryTagRequest(System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.CustomGalleryRequestBuilder.RemoveCustomGalleryTagsRequest(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.CustomGalleryRequestBuilder.RemoveFilteredOutGalleryTagRequest(System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.GalleryRequestBuilder.PublishToGalleryRequest(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.GalleryRequestBuilder.SearchGalleryAdvancedRequest(System.String,System.String,System.String,System.String,System.String,System.Nullable{Imgur.API.Enums.ImageFileType},System.Nullable{Imgur.API.Enums.ImageSize})">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.GalleryRequestBuilder.SearchGalleryRequest(System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.ImageRequestBuilder.UpdateImageRequest(System.String,System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.ImageRequestBuilder.UploadImageBinaryRequest(System.String,System.Byte[],System.String,System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.ImageRequestBuilder.UploadImageStreamRequest(System.String,System.IO.Stream,System.String,System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.ImageRequestBuilder.UploadImageUrlRequest(System.String,System.String,System.String,System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.NotificationRequestBuilder.MarkNotificationsViewedRequest(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.OAuth2RequestBuilder.GetTokenByCodeRequest(System.String,System.String,System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.OAuth2RequestBuilder.GetTokenByPinRequest(System.String,System.String,System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.OAuth2RequestBuilder.GetTokenByRefreshTokenRequest(System.String,System.String,System.String,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.RequestBuilderBase.CreateRequest(System.Net.Http.HttpMethod,System.String)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
        <member name="M:Imgur.API.RequestBuilders.RequestBuilderBase.ReportItemRequest(System.String,Imgur.API.Enums.ReportReason)">
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null reference is passed to a method that does not accept it as a
                valid argument.
            </exception>
        </member>
    </members>
</doc>
